// <auto-generated />
using System;
using HikiComic.Data.EF;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace HikiComic.Data.Migrations
{
    [DbContext(typeof(HikiComicDbContext))]
    [Migration("20230715162045_db-new-field-notification")]
    partial class dbnewfieldnotification
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("HikiComic.Data.Entities.Account", b =>
                {
                    b.Property<int>("AccountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AccountId"), 1L, 1);

                    b.Property<Guid>("AppUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("CoinsDeposited")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValue(0.0);

                    b.Property<double>("CoinsLeft")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValue(0.0);

                    b.Property<double>("CoinsReceived")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValue(0.0);

                    b.Property<double>("CoinsSpent")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValue(0.0);

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2023, 7, 15, 23, 20, 44, 262, DateTimeKind.Local).AddTicks(2269));

                    b.Property<double>("Experienced")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValue(0.0);

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("MoreInfo")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Nickname")
                        .HasMaxLength(200)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("AccountId");

                    b.HasIndex("AppUserId")
                        .IsUnique();

                    b.ToTable("Accounts", (string)null);

                    b.HasData(
                        new
                        {
                            AccountId = 1,
                            AppUserId = new Guid("0b64f6f0-9f60-45c9-9e7b-f68ccc3fc57f"),
                            CoinsDeposited = 0.0,
                            CoinsLeft = 0.0,
                            CoinsReceived = 0.0,
                            CoinsSpent = 0.0,
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Experienced = 0.0,
                            IsDeleted = false,
                            MoreInfo = "Administrator"
                        },
                        new
                        {
                            AccountId = 2,
                            AppUserId = new Guid("0ae34db7-ea08-42d2-9aef-098efcdd2c1e"),
                            CoinsDeposited = 0.0,
                            CoinsLeft = 0.0,
                            CoinsReceived = 0.0,
                            CoinsSpent = 0.0,
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Experienced = 0.0,
                            IsDeleted = false,
                            MoreInfo = "Supper VIP PRO"
                        },
                        new
                        {
                            AccountId = 3,
                            AppUserId = new Guid("3e3245cb-bc7b-4c08-ad09-72fbd736fc9a"),
                            CoinsDeposited = 0.0,
                            CoinsLeft = 0.0,
                            CoinsReceived = 0.0,
                            CoinsSpent = 0.0,
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Experienced = 0.0,
                            IsDeleted = false,
                            MoreInfo = "team members"
                        },
                        new
                        {
                            AccountId = 4,
                            AppUserId = new Guid("d8682aa6-255a-4b31-aeaa-1aff35a8be58"),
                            CoinsDeposited = 0.0,
                            CoinsLeft = 0.0,
                            CoinsReceived = 0.0,
                            CoinsSpent = 0.0,
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Experienced = 0.0,
                            IsDeleted = false,
                            MoreInfo = "creator"
                        },
                        new
                        {
                            AccountId = 5,
                            AppUserId = new Guid("4354acbc-a32a-4a28-b865-deb49695171f"),
                            CoinsDeposited = 0.0,
                            CoinsLeft = 0.0,
                            CoinsReceived = 0.0,
                            CoinsSpent = 0.0,
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Experienced = 0.0,
                            IsDeleted = false,
                            MoreInfo = "reader"
                        });
                });

            modelBuilder.Entity("HikiComic.Data.Entities.AppRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AppRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("e1db1200-1bb6-4156-9da3-135e91d94aba"),
                            ConcurrencyStamp = "ee209927-0478-4a35-b71f-ce99bdc25eec",
                            CreatedBy = new Guid("0b64f6f0-9f60-45c9-9e7b-f68ccc3fc57f"),
                            DateCreated = new DateTime(2023, 7, 15, 23, 20, 44, 273, DateTimeKind.Local).AddTicks(8686),
                            Description = "Administrator Role",
                            IsDeleted = false,
                            Name = "admin",
                            NormalizedName = "ADMIN",
                            Priority = 4
                        },
                        new
                        {
                            Id = new Guid("c489f858-aabd-4264-96c1-5cdca251d871"),
                            ConcurrencyStamp = "3d0b9e5f-e6dd-4cb3-a412-83d3dc284812",
                            CreatedBy = new Guid("0b64f6f0-9f60-45c9-9e7b-f68ccc3fc57f"),
                            DateCreated = new DateTime(2023, 7, 15, 23, 20, 44, 273, DateTimeKind.Local).AddTicks(8710),
                            Description = "Team Members Role",
                            IsDeleted = false,
                            Name = "teamMembers",
                            NormalizedName = "TEAMMEMBERS",
                            Priority = 3
                        },
                        new
                        {
                            Id = new Guid("71b1b0a6-7eab-476c-b177-1d37e120184c"),
                            ConcurrencyStamp = "c18c5921-5111-44a7-abe4-dd397c58610e",
                            CreatedBy = new Guid("0b64f6f0-9f60-45c9-9e7b-f68ccc3fc57f"),
                            DateCreated = new DateTime(2023, 7, 15, 23, 20, 44, 273, DateTimeKind.Local).AddTicks(8716),
                            Description = "Creator Role",
                            IsDeleted = false,
                            Name = "creator",
                            NormalizedName = "CREATOR",
                            Priority = 2
                        },
                        new
                        {
                            Id = new Guid("2f0c7b75-8934-4101-bef2-c850e42d21de"),
                            ConcurrencyStamp = "26a854c4-edd6-4fa9-aa64-c9572f14f80c",
                            CreatedBy = new Guid("0b64f6f0-9f60-45c9-9e7b-f68ccc3fc57f"),
                            DateCreated = new DateTime(2023, 7, 15, 23, 20, 44, 273, DateTimeKind.Local).AddTicks(8732),
                            Description = "Reader Role",
                            IsDeleted = false,
                            Name = "reader",
                            NormalizedName = "READER",
                            Priority = 1
                        });
                });

            modelBuilder.Entity("HikiComic.Data.Entities.AppRoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AppRoleClaims", (string)null);
                });

            modelBuilder.Entity("HikiComic.Data.Entities.AppUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<int>("AppUserTypeId")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DOB")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DatePasswordChanged")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int?>("GenderId")
                        .HasColumnType("int");

                    b.Property<bool>("IsCreateAppUserWithThirdParty")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool?>("IsOTPVerified")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPasswordChanged")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("LastName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("OTP")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<DateTime?>("OTPExpires")
                        .HasColumnType("datetime2");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("RefreshToken")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("TokenCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("TokenExpires")
                        .HasColumnType("datetime2");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserImageURL")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("GenderId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AppUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("0b64f6f0-9f60-45c9-9e7b-f68ccc3fc57f"),
                            AccessFailedCount = 0,
                            AppUserTypeId = 0,
                            ConcurrencyStamp = "393ee076-15fc-42ac-8c5d-203e5f4bcb21",
                            DOB = new DateTime(2001, 10, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "tranquangbdhz@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Tran",
                            GenderId = 1,
                            IsCreateAppUserWithThirdParty = false,
                            IsDeleted = false,
                            IsPasswordChanged = false,
                            LastName = "Quang",
                            LockoutEnabled = false,
                            NormalizedEmail = "TRANQUANGBDHZ@GMAIL.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAEAACcQAAAAEOMzNI2ms4BGoEGpGPJYvY/7boJKZo5jOKuhJJpEou357Ysx3bu1uLx9tdHnV9UEXg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserImageURL = "",
                            UserName = "quangbdhz"
                        },
                        new
                        {
                            Id = new Guid("0ae34db7-ea08-42d2-9aef-098efcdd2c1e"),
                            AccessFailedCount = 0,
                            AppUserTypeId = 0,
                            ConcurrencyStamp = "3260d0ff-8378-432b-8d79-f335e78b436f",
                            DOB = new DateTime(2000, 5, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DatePasswordChanged = new DateTime(2023, 7, 15, 23, 20, 44, 289, DateTimeKind.Local).AddTicks(8809),
                            Email = "hikistudio@hiki.space",
                            EmailConfirmed = true,
                            FirstName = "Admin",
                            GenderId = 2,
                            IsCreateAppUserWithThirdParty = false,
                            IsDeleted = false,
                            IsPasswordChanged = true,
                            LastName = "HikiStudio",
                            LockoutEnabled = false,
                            NormalizedEmail = "HIKISTUDIO@HIKI.SPACE",
                            NormalizedUserName = "HIKISTUDIO",
                            PasswordHash = "AQAAAAEAACcQAAAAEE80BSjJM40nGsV4bG1a1yVo8t61uelf4hrnwZNAPKQusGBeEhcPJso70siVyV2yMA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserImageURL = "",
                            UserName = "hikistudio"
                        },
                        new
                        {
                            Id = new Guid("3e3245cb-bc7b-4c08-ad09-72fbd736fc9a"),
                            AccessFailedCount = 0,
                            AppUserTypeId = 0,
                            ConcurrencyStamp = "e9a1d9e0-3725-41fa-b2e4-3d73b5af0461",
                            DOB = new DateTime(1990, 10, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DatePasswordChanged = new DateTime(2023, 7, 15, 23, 20, 44, 301, DateTimeKind.Local).AddTicks(8633),
                            Email = "lionelmessi@hiki.space",
                            EmailConfirmed = true,
                            FirstName = "Lionel",
                            GenderId = 1,
                            IsCreateAppUserWithThirdParty = false,
                            IsDeleted = false,
                            IsPasswordChanged = true,
                            LastName = "Messi",
                            LockoutEnabled = false,
                            NormalizedEmail = "LIONELMESSI@HIKI.SPACE",
                            NormalizedUserName = "YUKINO",
                            PasswordHash = "AQAAAAEAACcQAAAAEOAK03kvktbGIayxkq4/JqyQNrHNcPs9/Af+mh93x7kJwvePbvewj1oeMeJSEnfgCA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserImageURL = "",
                            UserName = "lionelmessi"
                        },
                        new
                        {
                            Id = new Guid("d8682aa6-255a-4b31-aeaa-1aff35a8be58"),
                            AccessFailedCount = 0,
                            AppUserTypeId = 0,
                            ConcurrencyStamp = "e90fc086-7175-4f7b-b3bd-6cb65b7da46c",
                            DOB = new DateTime(2001, 10, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DatePasswordChanged = new DateTime(2023, 7, 15, 23, 20, 44, 313, DateTimeKind.Local).AddTicks(7943),
                            Email = "creator@hiki.space",
                            EmailConfirmed = true,
                            FirstName = "Creator",
                            GenderId = 2,
                            IsCreateAppUserWithThirdParty = false,
                            IsDeleted = false,
                            IsPasswordChanged = true,
                            LastName = "HikiStudio",
                            LockoutEnabled = false,
                            NormalizedEmail = "CREATOR@HIKI.SPACE",
                            NormalizedUserName = "CREATOR",
                            PasswordHash = "AQAAAAEAACcQAAAAEH25WwB7x9/INA8Z4ujL9GySTuqVdR8oPG62/PM9RyLGRC4IKAEybpfDhFHwPZQiIQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserImageURL = "",
                            UserName = "creator"
                        },
                        new
                        {
                            Id = new Guid("4354acbc-a32a-4a28-b865-deb49695171f"),
                            AccessFailedCount = 0,
                            AppUserTypeId = 0,
                            ConcurrencyStamp = "d7271523-7baa-4985-8491-1f0c519a1498",
                            DOB = new DateTime(2001, 10, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DatePasswordChanged = new DateTime(2023, 7, 15, 23, 20, 44, 321, DateTimeKind.Local).AddTicks(3287),
                            Email = "reader@hiki.space",
                            EmailConfirmed = true,
                            FirstName = "Reader",
                            GenderId = 3,
                            IsCreateAppUserWithThirdParty = false,
                            IsDeleted = false,
                            IsPasswordChanged = true,
                            LastName = "HikiStudio",
                            LockoutEnabled = false,
                            NormalizedEmail = "READER@HIKI.SPACE",
                            NormalizedUserName = "READER",
                            PasswordHash = "AQAAAAEAACcQAAAAEGF8WE1e5Si7hngw7BBvgo3fkgVps4BzK6TXKmJ1C9gSRg/il6aRIWHixl7U0lRN6w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserImageURL = "",
                            UserName = "reader"
                        });
                });

            modelBuilder.Entity("HikiComic.Data.Entities.AppUserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AppUserClaims", (string)null);
                });

            modelBuilder.Entity("HikiComic.Data.Entities.AppUserDevice", b =>
                {
                    b.Property<int>("AppUserDeviceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AppUserDeviceId"), 1L, 1);

                    b.Property<Guid>("AppUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeviceId")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("DeviceName")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("DeviceOS")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("DeviceType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FCMDeviceToken")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("AppUserDeviceId");

                    b.HasIndex("AppUserId");

                    b.ToTable("AppUserDevices", (string)null);
                });

            modelBuilder.Entity("HikiComic.Data.Entities.AppUserLogin", b =>
                {
                    b.Property<int>("AppUserLoginId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AppUserLoginId"), 1L, 1);

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("AppUserLoginId");

                    b.HasIndex("UserId");

                    b.ToTable("AppUserLogins", (string)null);
                });

            modelBuilder.Entity("HikiComic.Data.Entities.AppUserOTP", b =>
                {
                    b.Property<int>("AppUserOTPId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AppUserOTPId"), 1L, 1);

                    b.Property<Guid>("AppUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsOTPVerified")
                        .HasColumnType("bit");

                    b.Property<string>("OTP")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("OTPExpires")
                        .HasColumnType("datetime2");

                    b.Property<int>("OTPType")
                        .HasColumnType("int");

                    b.HasKey("AppUserOTPId");

                    b.HasIndex("AppUserId");

                    b.ToTable("AppUserOTPs", (string)null);
                });

            modelBuilder.Entity("HikiComic.Data.Entities.AppUserRole", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AppUserRoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValue(new Guid("00000000-0000-0000-0000-000000000000"));

                    b.HasKey("UserId", "RoleId", "AppUserRoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AppUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = new Guid("0b64f6f0-9f60-45c9-9e7b-f68ccc3fc57f"),
                            RoleId = new Guid("e1db1200-1bb6-4156-9da3-135e91d94aba"),
                            AppUserRoleId = new Guid("967d256f-b5ac-47c3-8e67-31456e8df5a5")
                        },
                        new
                        {
                            UserId = new Guid("0b64f6f0-9f60-45c9-9e7b-f68ccc3fc57f"),
                            RoleId = new Guid("2f0c7b75-8934-4101-bef2-c850e42d21de"),
                            AppUserRoleId = new Guid("ccacce4e-a9ba-4fdb-b8d7-a6e9f969e5fd")
                        },
                        new
                        {
                            UserId = new Guid("0ae34db7-ea08-42d2-9aef-098efcdd2c1e"),
                            RoleId = new Guid("e1db1200-1bb6-4156-9da3-135e91d94aba"),
                            AppUserRoleId = new Guid("01969a1d-e7b3-4558-bb65-aeb419dea034")
                        },
                        new
                        {
                            UserId = new Guid("0ae34db7-ea08-42d2-9aef-098efcdd2c1e"),
                            RoleId = new Guid("2f0c7b75-8934-4101-bef2-c850e42d21de"),
                            AppUserRoleId = new Guid("7c4707ad-d54f-4ce2-bc6c-ca732f52a479")
                        },
                        new
                        {
                            UserId = new Guid("3e3245cb-bc7b-4c08-ad09-72fbd736fc9a"),
                            RoleId = new Guid("c489f858-aabd-4264-96c1-5cdca251d871"),
                            AppUserRoleId = new Guid("cbbb5df2-7b98-49e1-96e8-c47e40e6a3a2")
                        },
                        new
                        {
                            UserId = new Guid("3e3245cb-bc7b-4c08-ad09-72fbd736fc9a"),
                            RoleId = new Guid("2f0c7b75-8934-4101-bef2-c850e42d21de"),
                            AppUserRoleId = new Guid("e46bd57a-dd3a-4b1b-ac74-ded90c47bf9b")
                        },
                        new
                        {
                            UserId = new Guid("d8682aa6-255a-4b31-aeaa-1aff35a8be58"),
                            RoleId = new Guid("71b1b0a6-7eab-476c-b177-1d37e120184c"),
                            AppUserRoleId = new Guid("bca50d6e-f514-4c0b-9da4-b80115f8ac25")
                        },
                        new
                        {
                            UserId = new Guid("d8682aa6-255a-4b31-aeaa-1aff35a8be58"),
                            RoleId = new Guid("2f0c7b75-8934-4101-bef2-c850e42d21de"),
                            AppUserRoleId = new Guid("52e419a3-9eae-4f48-b3a0-cb287d08d177")
                        },
                        new
                        {
                            UserId = new Guid("4354acbc-a32a-4a28-b865-deb49695171f"),
                            RoleId = new Guid("2f0c7b75-8934-4101-bef2-c850e42d21de"),
                            AppUserRoleId = new Guid("b5065c1a-7717-4cde-b7f9-def0052b10e0")
                        });
                });

            modelBuilder.Entity("HikiComic.Data.Entities.AppUserToken", b =>
                {
                    b.Property<int>("AppUserTokenId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AppUserTokenId"), 1L, 1);

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AppUserTokenId");

                    b.HasIndex("UserId");

                    b.ToTable("AppUserTokens", (string)null);
                });

            modelBuilder.Entity("HikiComic.Data.Entities.Artist", b =>
                {
                    b.Property<int>("ArtistId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ArtistId"), 1L, 1);

                    b.Property<string>("Alternative")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("ArtistName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("ArtistSEOAlias")
                        .IsRequired()
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ArtistSEOSummary")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ArtistSEOTitle")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Summary")
                        .HasMaxLength(3800)
                        .HasColumnType("nvarchar(3800)");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ArtistId");

                    b.ToTable("Artists", (string)null);

                    b.HasData(
                        new
                        {
                            ArtistId = 1,
                            Alternative = "Updating",
                            ArtistName = "Updating",
                            ArtistSEOAlias = "updating-349149",
                            ArtistSEOSummary = "Updating SEO Summary - HIKICOMIC",
                            ArtistSEOTitle = "Updating SEO Title - HIKICOMIC",
                            CreatedBy = new Guid("0b64f6f0-9f60-45c9-9e7b-f68ccc3fc57f"),
                            DateCreated = new DateTime(2023, 7, 15, 23, 20, 44, 321, DateTimeKind.Local).AddTicks(3491),
                            IsDeleted = false,
                            Summary = "Updating Summary - HIKICOMIC"
                        });
                });

            modelBuilder.Entity("HikiComic.Data.Entities.ArtistInComicDetail", b =>
                {
                    b.Property<int>("ArtistId")
                        .HasColumnType("int");

                    b.Property<int>("ComicDetailId")
                        .HasColumnType("int");

                    b.HasKey("ArtistId", "ComicDetailId");

                    b.HasIndex("ComicDetailId");

                    b.ToTable("ArtistInComicDetails", (string)null);
                });

            modelBuilder.Entity("HikiComic.Data.Entities.Author", b =>
                {
                    b.Property<int>("AuthorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AuthorId"), 1L, 1);

                    b.Property<string>("Alternative")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("AuthorName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("AuthorSEOAlias")
                        .IsRequired()
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AuthorSEOSummary")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("AuthorSEOTitle")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Summary")
                        .HasMaxLength(3800)
                        .HasColumnType("nvarchar(3800)");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("AuthorId");

                    b.ToTable("Authors", (string)null);

                    b.HasData(
                        new
                        {
                            AuthorId = 1,
                            Alternative = "Updating",
                            AuthorName = "Updating",
                            AuthorSEOAlias = "updating-713713",
                            AuthorSEOSummary = "Updating SEO Summary - HIKICOMIC",
                            AuthorSEOTitle = "Updating SEO Title - HIKICOMIC",
                            CreatedBy = new Guid("0b64f6f0-9f60-45c9-9e7b-f68ccc3fc57f"),
                            DateCreated = new DateTime(2023, 7, 15, 23, 20, 44, 321, DateTimeKind.Local).AddTicks(3517),
                            IsDeleted = false,
                            Summary = "Updating Summary - HIKICOMIC"
                        });
                });

            modelBuilder.Entity("HikiComic.Data.Entities.AuthorInComicDetail", b =>
                {
                    b.Property<int>("AuthorId")
                        .HasColumnType("int");

                    b.Property<int>("ComicDetailId")
                        .HasColumnType("int");

                    b.HasKey("AuthorId", "ComicDetailId");

                    b.HasIndex("ComicDetailId");

                    b.ToTable("AuthorInComicDetails", (string)null);
                });

            modelBuilder.Entity("HikiComic.Data.Entities.Chapter", b =>
                {
                    b.Property<int>("ChapterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ChapterId"), 1L, 1);

                    b.Property<string>("ChapterName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ChapterSEOAlias")
                        .IsRequired()
                        .HasMaxLength(300)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(300)");

                    b.Property<int>("ComicDetailId")
                        .HasColumnType("int");

                    b.Property<string>("ComicSEOAlias")
                        .IsRequired()
                        .HasMaxLength(300)
                        .IsUnicode(false)
                        .HasColumnType("varchar(300)");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DateApproved")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsApproved")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int>("SerialChapterOfComic")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(-1);

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserIdApproved")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ViewCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.HasKey("ChapterId");

                    b.HasIndex("ComicDetailId");

                    b.ToTable("Chapters", (string)null);
                });

            modelBuilder.Entity("HikiComic.Data.Entities.ChapterImageURL", b =>
                {
                    b.Property<int>("ChapterImageURLId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ChapterImageURLId"), 1L, 1);

                    b.Property<int>("ChapterId")
                        .HasColumnType("int");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageURL")
                        .IsRequired()
                        .HasMaxLength(7800)
                        .IsUnicode(false)
                        .HasColumnType("varchar(7800)");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int>("SerialImageURLOfChapter")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ChapterImageURLId");

                    b.HasIndex("ChapterId");

                    b.ToTable("ChapterImageURLs", (string)null);
                });

            modelBuilder.Entity("HikiComic.Data.Entities.Comic", b =>
                {
                    b.Property<int>("ComicId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ComicId"), 1L, 1);

                    b.Property<string>("Alternative")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ComicCoverImageURL")
                        .IsRequired()
                        .HasMaxLength(300)
                        .IsUnicode(false)
                        .HasColumnType("varchar(300)");

                    b.Property<string>("ComicName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("CountFollow")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("CountLike")
                        .HasColumnType("int");

                    b.Property<int>("CountRating")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DateApproved")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsApproved")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int?>("NewChapterId")
                        .HasColumnType("int");

                    b.Property<double>("Rating")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValue(0.0);

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserIdApproved")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ViewCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.HasKey("ComicId");

                    b.ToTable("Comics", (string)null);
                });

            modelBuilder.Entity("HikiComic.Data.Entities.ComicDetail", b =>
                {
                    b.Property<int>("ComicDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ComicDetailId"), 1L, 1);

                    b.Property<string>("ComicDetailCoverImageURL")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("ComicId")
                        .HasColumnType("int");

                    b.Property<string>("ComicSEOAlias")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ComicSEOSummary")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("ComicSEOTitle")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<string>("Summary")
                        .IsRequired()
                        .HasMaxLength(3800)
                        .HasColumnType("nvarchar(3800)");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ComicDetailId");

                    b.HasIndex("ComicId")
                        .IsUnique();

                    b.HasIndex("StatusId");

                    b.ToTable("ComicDetails", (string)null);
                });

            modelBuilder.Entity("HikiComic.Data.Entities.Comment", b =>
                {
                    b.Property<int>("CommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CommentId"), 1L, 1);

                    b.Property<Guid>("AppUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("ChapterId")
                        .HasColumnType("int");

                    b.Property<int>("ComicId")
                        .HasColumnType("int");

                    b.Property<string>("CommentContent")
                        .IsRequired()
                        .HasMaxLength(2500)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(2500)");

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2023, 7, 15, 23, 20, 44, 269, DateTimeKind.Local).AddTicks(2334));

                    b.Property<int>("Dislike")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int>("Like")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int?>("ParentCommentId")
                        .HasColumnType("int");

                    b.HasKey("CommentId");

                    b.HasIndex("AppUserId");

                    b.HasIndex("ComicId");

                    b.HasIndex("ParentCommentId");

                    b.ToTable("Comments", (string)null);
                });

            modelBuilder.Entity("HikiComic.Data.Entities.Gender", b =>
                {
                    b.Property<int>("GenderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GenderId"), 1L, 1);

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("GenderName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("GenderId");

                    b.ToTable("Genders", (string)null);

                    b.HasData(
                        new
                        {
                            GenderId = 1,
                            CreatedBy = new Guid("0b64f6f0-9f60-45c9-9e7b-f68ccc3fc57f"),
                            DateCreated = new DateTime(2023, 7, 15, 23, 20, 44, 273, DateTimeKind.Local).AddTicks(8516),
                            GenderName = "Male",
                            IsDeleted = false
                        },
                        new
                        {
                            GenderId = 2,
                            CreatedBy = new Guid("0b64f6f0-9f60-45c9-9e7b-f68ccc3fc57f"),
                            DateCreated = new DateTime(2023, 7, 15, 23, 20, 44, 273, DateTimeKind.Local).AddTicks(8520),
                            GenderName = "Female",
                            IsDeleted = false
                        },
                        new
                        {
                            GenderId = 3,
                            CreatedBy = new Guid("0b64f6f0-9f60-45c9-9e7b-f68ccc3fc57f"),
                            DateCreated = new DateTime(2023, 7, 15, 23, 20, 44, 273, DateTimeKind.Local).AddTicks(8522),
                            GenderName = "Other",
                            IsDeleted = false
                        });
                });

            modelBuilder.Entity("HikiComic.Data.Entities.Genre", b =>
                {
                    b.Property<int>("GenreId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GenreId"), 1L, 1);

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DateApproved")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("GenreImageURL")
                        .IsRequired()
                        .HasMaxLength(300)
                        .IsUnicode(false)
                        .HasColumnType("varchar(300)");

                    b.Property<int?>("GenreParentId")
                        .HasColumnType("int");

                    b.Property<bool>("IsApproved")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsShowHome")
                        .HasColumnType("bit");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserIdApproved")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("GenreId");

                    b.ToTable("Genres", (string)null);

                    b.HasData(
                        new
                        {
                            GenreId = 1,
                            CreatedBy = new Guid("0b64f6f0-9f60-45c9-9e7b-f68ccc3fc57f"),
                            DateCreated = new DateTime(2023, 7, 15, 23, 20, 44, 321, DateTimeKind.Local).AddTicks(3544),
                            GenreImageURL = "",
                            IsApproved = false,
                            IsDeleted = false,
                            IsShowHome = false
                        },
                        new
                        {
                            GenreId = 2,
                            CreatedBy = new Guid("0b64f6f0-9f60-45c9-9e7b-f68ccc3fc57f"),
                            DateCreated = new DateTime(2023, 7, 15, 23, 20, 44, 321, DateTimeKind.Local).AddTicks(3733),
                            GenreImageURL = "",
                            IsApproved = false,
                            IsDeleted = false,
                            IsShowHome = false
                        },
                        new
                        {
                            GenreId = 3,
                            CreatedBy = new Guid("0b64f6f0-9f60-45c9-9e7b-f68ccc3fc57f"),
                            DateCreated = new DateTime(2023, 7, 15, 23, 20, 44, 321, DateTimeKind.Local).AddTicks(3745),
                            GenreImageURL = "",
                            IsApproved = false,
                            IsDeleted = false,
                            IsShowHome = false
                        },
                        new
                        {
                            GenreId = 4,
                            CreatedBy = new Guid("0b64f6f0-9f60-45c9-9e7b-f68ccc3fc57f"),
                            DateCreated = new DateTime(2023, 7, 15, 23, 20, 44, 321, DateTimeKind.Local).AddTicks(3759),
                            GenreImageURL = "",
                            IsApproved = false,
                            IsDeleted = false,
                            IsShowHome = false
                        },
                        new
                        {
                            GenreId = 5,
                            CreatedBy = new Guid("0b64f6f0-9f60-45c9-9e7b-f68ccc3fc57f"),
                            DateCreated = new DateTime(2023, 7, 15, 23, 20, 44, 321, DateTimeKind.Local).AddTicks(3766),
                            GenreImageURL = "",
                            IsApproved = false,
                            IsDeleted = false,
                            IsShowHome = false
                        },
                        new
                        {
                            GenreId = 6,
                            CreatedBy = new Guid("0b64f6f0-9f60-45c9-9e7b-f68ccc3fc57f"),
                            DateCreated = new DateTime(2023, 7, 15, 23, 20, 44, 321, DateTimeKind.Local).AddTicks(3768),
                            GenreImageURL = "",
                            IsApproved = false,
                            IsDeleted = false,
                            IsShowHome = false
                        },
                        new
                        {
                            GenreId = 7,
                            CreatedBy = new Guid("0b64f6f0-9f60-45c9-9e7b-f68ccc3fc57f"),
                            DateCreated = new DateTime(2023, 7, 15, 23, 20, 44, 321, DateTimeKind.Local).AddTicks(3770),
                            GenreImageURL = "",
                            IsApproved = false,
                            IsDeleted = false,
                            IsShowHome = false
                        },
                        new
                        {
                            GenreId = 8,
                            CreatedBy = new Guid("0b64f6f0-9f60-45c9-9e7b-f68ccc3fc57f"),
                            DateCreated = new DateTime(2023, 7, 15, 23, 20, 44, 321, DateTimeKind.Local).AddTicks(3771),
                            GenreImageURL = "",
                            IsApproved = false,
                            IsDeleted = false,
                            IsShowHome = false
                        },
                        new
                        {
                            GenreId = 9,
                            CreatedBy = new Guid("0b64f6f0-9f60-45c9-9e7b-f68ccc3fc57f"),
                            DateCreated = new DateTime(2023, 7, 15, 23, 20, 44, 321, DateTimeKind.Local).AddTicks(3772),
                            GenreImageURL = "",
                            IsApproved = false,
                            IsDeleted = false,
                            IsShowHome = false
                        },
                        new
                        {
                            GenreId = 10,
                            CreatedBy = new Guid("0b64f6f0-9f60-45c9-9e7b-f68ccc3fc57f"),
                            DateCreated = new DateTime(2023, 7, 15, 23, 20, 44, 321, DateTimeKind.Local).AddTicks(3773),
                            GenreImageURL = "",
                            IsApproved = false,
                            IsDeleted = false,
                            IsShowHome = false
                        },
                        new
                        {
                            GenreId = 11,
                            CreatedBy = new Guid("0b64f6f0-9f60-45c9-9e7b-f68ccc3fc57f"),
                            DateCreated = new DateTime(2023, 7, 15, 23, 20, 44, 321, DateTimeKind.Local).AddTicks(3775),
                            GenreImageURL = "",
                            IsApproved = false,
                            IsDeleted = false,
                            IsShowHome = false
                        },
                        new
                        {
                            GenreId = 12,
                            CreatedBy = new Guid("0b64f6f0-9f60-45c9-9e7b-f68ccc3fc57f"),
                            DateCreated = new DateTime(2023, 7, 15, 23, 20, 44, 321, DateTimeKind.Local).AddTicks(3776),
                            GenreImageURL = "",
                            IsApproved = false,
                            IsDeleted = false,
                            IsShowHome = false
                        },
                        new
                        {
                            GenreId = 13,
                            CreatedBy = new Guid("0b64f6f0-9f60-45c9-9e7b-f68ccc3fc57f"),
                            DateCreated = new DateTime(2023, 7, 15, 23, 20, 44, 321, DateTimeKind.Local).AddTicks(3777),
                            GenreImageURL = "",
                            IsApproved = false,
                            IsDeleted = false,
                            IsShowHome = false
                        },
                        new
                        {
                            GenreId = 14,
                            CreatedBy = new Guid("0b64f6f0-9f60-45c9-9e7b-f68ccc3fc57f"),
                            DateCreated = new DateTime(2023, 7, 15, 23, 20, 44, 321, DateTimeKind.Local).AddTicks(3778),
                            GenreImageURL = "",
                            IsApproved = false,
                            IsDeleted = false,
                            IsShowHome = false
                        },
                        new
                        {
                            GenreId = 15,
                            CreatedBy = new Guid("0b64f6f0-9f60-45c9-9e7b-f68ccc3fc57f"),
                            DateCreated = new DateTime(2023, 7, 15, 23, 20, 44, 321, DateTimeKind.Local).AddTicks(3779),
                            GenreImageURL = "",
                            IsApproved = false,
                            IsDeleted = false,
                            IsShowHome = false
                        },
                        new
                        {
                            GenreId = 16,
                            CreatedBy = new Guid("0b64f6f0-9f60-45c9-9e7b-f68ccc3fc57f"),
                            DateCreated = new DateTime(2023, 7, 15, 23, 20, 44, 321, DateTimeKind.Local).AddTicks(3779),
                            GenreImageURL = "",
                            IsApproved = false,
                            IsDeleted = false,
                            IsShowHome = false
                        },
                        new
                        {
                            GenreId = 17,
                            CreatedBy = new Guid("0b64f6f0-9f60-45c9-9e7b-f68ccc3fc57f"),
                            DateCreated = new DateTime(2023, 7, 15, 23, 20, 44, 321, DateTimeKind.Local).AddTicks(3780),
                            GenreImageURL = "",
                            IsApproved = false,
                            IsDeleted = false,
                            IsShowHome = false
                        },
                        new
                        {
                            GenreId = 18,
                            CreatedBy = new Guid("0b64f6f0-9f60-45c9-9e7b-f68ccc3fc57f"),
                            DateCreated = new DateTime(2023, 7, 15, 23, 20, 44, 321, DateTimeKind.Local).AddTicks(3781),
                            GenreImageURL = "",
                            IsApproved = false,
                            IsDeleted = false,
                            IsShowHome = false
                        },
                        new
                        {
                            GenreId = 19,
                            CreatedBy = new Guid("0b64f6f0-9f60-45c9-9e7b-f68ccc3fc57f"),
                            DateCreated = new DateTime(2023, 7, 15, 23, 20, 44, 321, DateTimeKind.Local).AddTicks(3783),
                            GenreImageURL = "",
                            IsApproved = false,
                            IsDeleted = false,
                            IsShowHome = false
                        },
                        new
                        {
                            GenreId = 20,
                            CreatedBy = new Guid("0b64f6f0-9f60-45c9-9e7b-f68ccc3fc57f"),
                            DateCreated = new DateTime(2023, 7, 15, 23, 20, 44, 321, DateTimeKind.Local).AddTicks(3784),
                            GenreImageURL = "",
                            IsApproved = false,
                            IsDeleted = false,
                            IsShowHome = false
                        },
                        new
                        {
                            GenreId = 21,
                            CreatedBy = new Guid("0b64f6f0-9f60-45c9-9e7b-f68ccc3fc57f"),
                            DateCreated = new DateTime(2023, 7, 15, 23, 20, 44, 321, DateTimeKind.Local).AddTicks(3785),
                            GenreImageURL = "",
                            IsApproved = false,
                            IsDeleted = false,
                            IsShowHome = false
                        },
                        new
                        {
                            GenreId = 22,
                            CreatedBy = new Guid("0b64f6f0-9f60-45c9-9e7b-f68ccc3fc57f"),
                            DateCreated = new DateTime(2023, 7, 15, 23, 20, 44, 321, DateTimeKind.Local).AddTicks(3786),
                            GenreImageURL = "",
                            IsApproved = false,
                            IsDeleted = false,
                            IsShowHome = false
                        },
                        new
                        {
                            GenreId = 23,
                            CreatedBy = new Guid("0b64f6f0-9f60-45c9-9e7b-f68ccc3fc57f"),
                            DateCreated = new DateTime(2023, 7, 15, 23, 20, 44, 321, DateTimeKind.Local).AddTicks(3786),
                            GenreImageURL = "",
                            IsApproved = false,
                            IsDeleted = false,
                            IsShowHome = false
                        },
                        new
                        {
                            GenreId = 24,
                            CreatedBy = new Guid("0b64f6f0-9f60-45c9-9e7b-f68ccc3fc57f"),
                            DateCreated = new DateTime(2023, 7, 15, 23, 20, 44, 321, DateTimeKind.Local).AddTicks(3787),
                            GenreImageURL = "",
                            IsApproved = false,
                            IsDeleted = false,
                            IsShowHome = false
                        },
                        new
                        {
                            GenreId = 25,
                            CreatedBy = new Guid("0b64f6f0-9f60-45c9-9e7b-f68ccc3fc57f"),
                            DateCreated = new DateTime(2023, 7, 15, 23, 20, 44, 321, DateTimeKind.Local).AddTicks(3788),
                            GenreImageURL = "",
                            IsApproved = false,
                            IsDeleted = false,
                            IsShowHome = false
                        },
                        new
                        {
                            GenreId = 26,
                            CreatedBy = new Guid("0b64f6f0-9f60-45c9-9e7b-f68ccc3fc57f"),
                            DateCreated = new DateTime(2023, 7, 15, 23, 20, 44, 321, DateTimeKind.Local).AddTicks(3789),
                            GenreImageURL = "",
                            IsApproved = false,
                            IsDeleted = false,
                            IsShowHome = false
                        },
                        new
                        {
                            GenreId = 27,
                            CreatedBy = new Guid("0b64f6f0-9f60-45c9-9e7b-f68ccc3fc57f"),
                            DateCreated = new DateTime(2023, 7, 15, 23, 20, 44, 321, DateTimeKind.Local).AddTicks(3790),
                            GenreImageURL = "",
                            IsApproved = false,
                            IsDeleted = false,
                            IsShowHome = false
                        },
                        new
                        {
                            GenreId = 28,
                            CreatedBy = new Guid("0b64f6f0-9f60-45c9-9e7b-f68ccc3fc57f"),
                            DateCreated = new DateTime(2023, 7, 15, 23, 20, 44, 321, DateTimeKind.Local).AddTicks(3791),
                            GenreImageURL = "",
                            IsApproved = false,
                            IsDeleted = false,
                            IsShowHome = false
                        },
                        new
                        {
                            GenreId = 29,
                            CreatedBy = new Guid("0b64f6f0-9f60-45c9-9e7b-f68ccc3fc57f"),
                            DateCreated = new DateTime(2023, 7, 15, 23, 20, 44, 321, DateTimeKind.Local).AddTicks(3792),
                            GenreImageURL = "",
                            IsApproved = false,
                            IsDeleted = false,
                            IsShowHome = false
                        },
                        new
                        {
                            GenreId = 30,
                            CreatedBy = new Guid("0b64f6f0-9f60-45c9-9e7b-f68ccc3fc57f"),
                            DateCreated = new DateTime(2023, 7, 15, 23, 20, 44, 321, DateTimeKind.Local).AddTicks(3793),
                            GenreImageURL = "",
                            IsApproved = false,
                            IsDeleted = false,
                            IsShowHome = false
                        },
                        new
                        {
                            GenreId = 31,
                            CreatedBy = new Guid("0b64f6f0-9f60-45c9-9e7b-f68ccc3fc57f"),
                            DateCreated = new DateTime(2023, 7, 15, 23, 20, 44, 321, DateTimeKind.Local).AddTicks(3794),
                            GenreImageURL = "",
                            IsApproved = false,
                            IsDeleted = false,
                            IsShowHome = false
                        },
                        new
                        {
                            GenreId = 32,
                            CreatedBy = new Guid("0b64f6f0-9f60-45c9-9e7b-f68ccc3fc57f"),
                            DateCreated = new DateTime(2023, 7, 15, 23, 20, 44, 321, DateTimeKind.Local).AddTicks(3795),
                            GenreImageURL = "",
                            IsApproved = false,
                            IsDeleted = false,
                            IsShowHome = false
                        },
                        new
                        {
                            GenreId = 33,
                            CreatedBy = new Guid("0b64f6f0-9f60-45c9-9e7b-f68ccc3fc57f"),
                            DateCreated = new DateTime(2023, 7, 15, 23, 20, 44, 321, DateTimeKind.Local).AddTicks(3795),
                            GenreImageURL = "",
                            IsApproved = false,
                            IsDeleted = false,
                            IsShowHome = false
                        },
                        new
                        {
                            GenreId = 34,
                            CreatedBy = new Guid("0b64f6f0-9f60-45c9-9e7b-f68ccc3fc57f"),
                            DateCreated = new DateTime(2023, 7, 15, 23, 20, 44, 321, DateTimeKind.Local).AddTicks(3796),
                            GenreImageURL = "",
                            IsApproved = false,
                            IsDeleted = false,
                            IsShowHome = false
                        },
                        new
                        {
                            GenreId = 35,
                            CreatedBy = new Guid("0b64f6f0-9f60-45c9-9e7b-f68ccc3fc57f"),
                            DateCreated = new DateTime(2023, 7, 15, 23, 20, 44, 321, DateTimeKind.Local).AddTicks(3798),
                            GenreImageURL = "",
                            IsApproved = false,
                            IsDeleted = false,
                            IsShowHome = false
                        },
                        new
                        {
                            GenreId = 36,
                            CreatedBy = new Guid("0b64f6f0-9f60-45c9-9e7b-f68ccc3fc57f"),
                            DateCreated = new DateTime(2023, 7, 15, 23, 20, 44, 321, DateTimeKind.Local).AddTicks(3799),
                            GenreImageURL = "",
                            IsApproved = false,
                            IsDeleted = false,
                            IsShowHome = false
                        },
                        new
                        {
                            GenreId = 37,
                            CreatedBy = new Guid("0b64f6f0-9f60-45c9-9e7b-f68ccc3fc57f"),
                            DateCreated = new DateTime(2023, 7, 15, 23, 20, 44, 321, DateTimeKind.Local).AddTicks(3800),
                            GenreImageURL = "",
                            IsApproved = false,
                            IsDeleted = false,
                            IsShowHome = false
                        },
                        new
                        {
                            GenreId = 38,
                            CreatedBy = new Guid("0b64f6f0-9f60-45c9-9e7b-f68ccc3fc57f"),
                            DateCreated = new DateTime(2023, 7, 15, 23, 20, 44, 321, DateTimeKind.Local).AddTicks(3801),
                            GenreImageURL = "",
                            IsApproved = false,
                            IsDeleted = false,
                            IsShowHome = false
                        },
                        new
                        {
                            GenreId = 39,
                            CreatedBy = new Guid("0b64f6f0-9f60-45c9-9e7b-f68ccc3fc57f"),
                            DateCreated = new DateTime(2023, 7, 15, 23, 20, 44, 321, DateTimeKind.Local).AddTicks(3801),
                            GenreImageURL = "",
                            IsApproved = false,
                            IsDeleted = false,
                            IsShowHome = false
                        },
                        new
                        {
                            GenreId = 40,
                            CreatedBy = new Guid("0b64f6f0-9f60-45c9-9e7b-f68ccc3fc57f"),
                            DateCreated = new DateTime(2023, 7, 15, 23, 20, 44, 321, DateTimeKind.Local).AddTicks(3802),
                            GenreImageURL = "",
                            IsApproved = false,
                            IsDeleted = false,
                            IsShowHome = false
                        },
                        new
                        {
                            GenreId = 41,
                            CreatedBy = new Guid("0b64f6f0-9f60-45c9-9e7b-f68ccc3fc57f"),
                            DateCreated = new DateTime(2023, 7, 15, 23, 20, 44, 321, DateTimeKind.Local).AddTicks(3803),
                            GenreImageURL = "",
                            IsApproved = false,
                            IsDeleted = false,
                            IsShowHome = false
                        },
                        new
                        {
                            GenreId = 42,
                            CreatedBy = new Guid("0b64f6f0-9f60-45c9-9e7b-f68ccc3fc57f"),
                            DateCreated = new DateTime(2023, 7, 15, 23, 20, 44, 321, DateTimeKind.Local).AddTicks(3804),
                            GenreImageURL = "",
                            IsApproved = false,
                            IsDeleted = false,
                            IsShowHome = false
                        },
                        new
                        {
                            GenreId = 43,
                            CreatedBy = new Guid("0b64f6f0-9f60-45c9-9e7b-f68ccc3fc57f"),
                            DateCreated = new DateTime(2023, 7, 15, 23, 20, 44, 321, DateTimeKind.Local).AddTicks(3805),
                            GenreImageURL = "",
                            IsApproved = false,
                            IsDeleted = false,
                            IsShowHome = false
                        },
                        new
                        {
                            GenreId = 44,
                            CreatedBy = new Guid("0b64f6f0-9f60-45c9-9e7b-f68ccc3fc57f"),
                            DateCreated = new DateTime(2023, 7, 15, 23, 20, 44, 321, DateTimeKind.Local).AddTicks(3806),
                            GenreImageURL = "",
                            IsApproved = false,
                            IsDeleted = false,
                            IsShowHome = false
                        },
                        new
                        {
                            GenreId = 45,
                            CreatedBy = new Guid("0b64f6f0-9f60-45c9-9e7b-f68ccc3fc57f"),
                            DateCreated = new DateTime(2023, 7, 15, 23, 20, 44, 321, DateTimeKind.Local).AddTicks(3806),
                            GenreImageURL = "",
                            IsApproved = false,
                            IsDeleted = false,
                            IsShowHome = false
                        },
                        new
                        {
                            GenreId = 46,
                            CreatedBy = new Guid("0b64f6f0-9f60-45c9-9e7b-f68ccc3fc57f"),
                            DateCreated = new DateTime(2023, 7, 15, 23, 20, 44, 321, DateTimeKind.Local).AddTicks(3812),
                            GenreImageURL = "",
                            IsApproved = false,
                            IsDeleted = false,
                            IsShowHome = false
                        },
                        new
                        {
                            GenreId = 47,
                            CreatedBy = new Guid("0b64f6f0-9f60-45c9-9e7b-f68ccc3fc57f"),
                            DateCreated = new DateTime(2023, 7, 15, 23, 20, 44, 321, DateTimeKind.Local).AddTicks(3813),
                            GenreImageURL = "",
                            IsApproved = false,
                            IsDeleted = false,
                            IsShowHome = false
                        },
                        new
                        {
                            GenreId = 48,
                            CreatedBy = new Guid("0b64f6f0-9f60-45c9-9e7b-f68ccc3fc57f"),
                            DateCreated = new DateTime(2023, 7, 15, 23, 20, 44, 321, DateTimeKind.Local).AddTicks(3814),
                            GenreImageURL = "",
                            IsApproved = false,
                            IsDeleted = false,
                            IsShowHome = false
                        },
                        new
                        {
                            GenreId = 49,
                            CreatedBy = new Guid("0b64f6f0-9f60-45c9-9e7b-f68ccc3fc57f"),
                            DateCreated = new DateTime(2023, 7, 15, 23, 20, 44, 321, DateTimeKind.Local).AddTicks(3814),
                            GenreImageURL = "",
                            IsApproved = false,
                            IsDeleted = false,
                            IsShowHome = false
                        },
                        new
                        {
                            GenreId = 50,
                            CreatedBy = new Guid("0b64f6f0-9f60-45c9-9e7b-f68ccc3fc57f"),
                            DateCreated = new DateTime(2023, 7, 15, 23, 20, 44, 321, DateTimeKind.Local).AddTicks(3815),
                            GenreImageURL = "",
                            IsApproved = false,
                            IsDeleted = false,
                            IsShowHome = false
                        },
                        new
                        {
                            GenreId = 51,
                            CreatedBy = new Guid("0b64f6f0-9f60-45c9-9e7b-f68ccc3fc57f"),
                            DateCreated = new DateTime(2023, 7, 15, 23, 20, 44, 321, DateTimeKind.Local).AddTicks(3816),
                            GenreImageURL = "",
                            IsApproved = false,
                            IsDeleted = false,
                            IsShowHome = false
                        },
                        new
                        {
                            GenreId = 52,
                            CreatedBy = new Guid("0b64f6f0-9f60-45c9-9e7b-f68ccc3fc57f"),
                            DateCreated = new DateTime(2023, 7, 15, 23, 20, 44, 321, DateTimeKind.Local).AddTicks(3817),
                            GenreImageURL = "",
                            IsApproved = false,
                            IsDeleted = false,
                            IsShowHome = false
                        },
                        new
                        {
                            GenreId = 53,
                            CreatedBy = new Guid("0b64f6f0-9f60-45c9-9e7b-f68ccc3fc57f"),
                            DateCreated = new DateTime(2023, 7, 15, 23, 20, 44, 321, DateTimeKind.Local).AddTicks(3818),
                            GenreImageURL = "",
                            IsApproved = false,
                            IsDeleted = false,
                            IsShowHome = false
                        },
                        new
                        {
                            GenreId = 54,
                            CreatedBy = new Guid("0b64f6f0-9f60-45c9-9e7b-f68ccc3fc57f"),
                            DateCreated = new DateTime(2023, 7, 15, 23, 20, 44, 321, DateTimeKind.Local).AddTicks(3819),
                            GenreImageURL = "",
                            IsApproved = false,
                            IsDeleted = false,
                            IsShowHome = false
                        },
                        new
                        {
                            GenreId = 55,
                            CreatedBy = new Guid("0b64f6f0-9f60-45c9-9e7b-f68ccc3fc57f"),
                            DateCreated = new DateTime(2023, 7, 15, 23, 20, 44, 321, DateTimeKind.Local).AddTicks(3819),
                            GenreImageURL = "",
                            IsApproved = false,
                            IsDeleted = false,
                            IsShowHome = false
                        },
                        new
                        {
                            GenreId = 56,
                            CreatedBy = new Guid("0b64f6f0-9f60-45c9-9e7b-f68ccc3fc57f"),
                            DateCreated = new DateTime(2023, 7, 15, 23, 20, 44, 321, DateTimeKind.Local).AddTicks(3820),
                            GenreImageURL = "",
                            IsApproved = false,
                            IsDeleted = false,
                            IsShowHome = false
                        },
                        new
                        {
                            GenreId = 57,
                            CreatedBy = new Guid("0b64f6f0-9f60-45c9-9e7b-f68ccc3fc57f"),
                            DateCreated = new DateTime(2023, 7, 15, 23, 20, 44, 321, DateTimeKind.Local).AddTicks(3821),
                            GenreImageURL = "",
                            IsApproved = false,
                            IsDeleted = false,
                            IsShowHome = false
                        },
                        new
                        {
                            GenreId = 58,
                            CreatedBy = new Guid("0b64f6f0-9f60-45c9-9e7b-f68ccc3fc57f"),
                            DateCreated = new DateTime(2023, 7, 15, 23, 20, 44, 321, DateTimeKind.Local).AddTicks(3822),
                            GenreImageURL = "",
                            IsApproved = false,
                            IsDeleted = false,
                            IsShowHome = false
                        },
                        new
                        {
                            GenreId = 59,
                            CreatedBy = new Guid("0b64f6f0-9f60-45c9-9e7b-f68ccc3fc57f"),
                            DateCreated = new DateTime(2023, 7, 15, 23, 20, 44, 321, DateTimeKind.Local).AddTicks(3823),
                            GenreImageURL = "",
                            IsApproved = false,
                            IsDeleted = false,
                            IsShowHome = false
                        },
                        new
                        {
                            GenreId = 60,
                            CreatedBy = new Guid("0b64f6f0-9f60-45c9-9e7b-f68ccc3fc57f"),
                            DateCreated = new DateTime(2023, 7, 15, 23, 20, 44, 321, DateTimeKind.Local).AddTicks(3824),
                            GenreImageURL = "",
                            IsApproved = false,
                            IsDeleted = false,
                            IsShowHome = false
                        },
                        new
                        {
                            GenreId = 61,
                            CreatedBy = new Guid("0b64f6f0-9f60-45c9-9e7b-f68ccc3fc57f"),
                            DateCreated = new DateTime(2023, 7, 15, 23, 20, 44, 321, DateTimeKind.Local).AddTicks(3825),
                            GenreImageURL = "",
                            IsApproved = false,
                            IsDeleted = false,
                            IsShowHome = false
                        },
                        new
                        {
                            GenreId = 62,
                            CreatedBy = new Guid("0b64f6f0-9f60-45c9-9e7b-f68ccc3fc57f"),
                            DateCreated = new DateTime(2023, 7, 15, 23, 20, 44, 321, DateTimeKind.Local).AddTicks(3826),
                            GenreImageURL = "",
                            IsApproved = false,
                            IsDeleted = false,
                            IsShowHome = false
                        },
                        new
                        {
                            GenreId = 63,
                            CreatedBy = new Guid("0b64f6f0-9f60-45c9-9e7b-f68ccc3fc57f"),
                            DateCreated = new DateTime(2023, 7, 15, 23, 20, 44, 321, DateTimeKind.Local).AddTicks(3826),
                            GenreImageURL = "",
                            IsApproved = false,
                            IsDeleted = false,
                            IsShowHome = false
                        },
                        new
                        {
                            GenreId = 64,
                            CreatedBy = new Guid("0b64f6f0-9f60-45c9-9e7b-f68ccc3fc57f"),
                            DateCreated = new DateTime(2023, 7, 15, 23, 20, 44, 321, DateTimeKind.Local).AddTicks(3827),
                            GenreImageURL = "",
                            IsApproved = false,
                            IsDeleted = false,
                            IsShowHome = false
                        },
                        new
                        {
                            GenreId = 65,
                            CreatedBy = new Guid("0b64f6f0-9f60-45c9-9e7b-f68ccc3fc57f"),
                            DateCreated = new DateTime(2023, 7, 15, 23, 20, 44, 321, DateTimeKind.Local).AddTicks(3828),
                            GenreImageURL = "",
                            IsApproved = false,
                            IsDeleted = false,
                            IsShowHome = false
                        },
                        new
                        {
                            GenreId = 66,
                            CreatedBy = new Guid("0b64f6f0-9f60-45c9-9e7b-f68ccc3fc57f"),
                            DateCreated = new DateTime(2023, 7, 15, 23, 20, 44, 321, DateTimeKind.Local).AddTicks(3829),
                            GenreImageURL = "",
                            IsApproved = false,
                            IsDeleted = false,
                            IsShowHome = false
                        },
                        new
                        {
                            GenreId = 67,
                            CreatedBy = new Guid("0b64f6f0-9f60-45c9-9e7b-f68ccc3fc57f"),
                            DateCreated = new DateTime(2023, 7, 15, 23, 20, 44, 321, DateTimeKind.Local).AddTicks(3831),
                            GenreImageURL = "",
                            IsApproved = false,
                            IsDeleted = false,
                            IsShowHome = false
                        },
                        new
                        {
                            GenreId = 68,
                            CreatedBy = new Guid("0b64f6f0-9f60-45c9-9e7b-f68ccc3fc57f"),
                            DateCreated = new DateTime(2023, 7, 15, 23, 20, 44, 321, DateTimeKind.Local).AddTicks(3832),
                            GenreImageURL = "",
                            IsApproved = false,
                            IsDeleted = false,
                            IsShowHome = false
                        },
                        new
                        {
                            GenreId = 69,
                            CreatedBy = new Guid("0b64f6f0-9f60-45c9-9e7b-f68ccc3fc57f"),
                            DateCreated = new DateTime(2023, 7, 15, 23, 20, 44, 321, DateTimeKind.Local).AddTicks(3833),
                            GenreImageURL = "",
                            IsApproved = false,
                            IsDeleted = false,
                            IsShowHome = false
                        },
                        new
                        {
                            GenreId = 70,
                            CreatedBy = new Guid("0b64f6f0-9f60-45c9-9e7b-f68ccc3fc57f"),
                            DateCreated = new DateTime(2023, 7, 15, 23, 20, 44, 321, DateTimeKind.Local).AddTicks(3833),
                            GenreImageURL = "",
                            IsApproved = false,
                            IsDeleted = false,
                            IsShowHome = false
                        },
                        new
                        {
                            GenreId = 71,
                            CreatedBy = new Guid("0b64f6f0-9f60-45c9-9e7b-f68ccc3fc57f"),
                            DateCreated = new DateTime(2023, 7, 15, 23, 20, 44, 321, DateTimeKind.Local).AddTicks(3834),
                            GenreImageURL = "",
                            IsApproved = false,
                            IsDeleted = false,
                            IsShowHome = false
                        },
                        new
                        {
                            GenreId = 72,
                            CreatedBy = new Guid("0b64f6f0-9f60-45c9-9e7b-f68ccc3fc57f"),
                            DateCreated = new DateTime(2023, 7, 15, 23, 20, 44, 321, DateTimeKind.Local).AddTicks(3835),
                            GenreImageURL = "",
                            IsApproved = false,
                            IsDeleted = false,
                            IsShowHome = false
                        },
                        new
                        {
                            GenreId = 73,
                            CreatedBy = new Guid("0b64f6f0-9f60-45c9-9e7b-f68ccc3fc57f"),
                            DateCreated = new DateTime(2023, 7, 15, 23, 20, 44, 321, DateTimeKind.Local).AddTicks(3836),
                            GenreImageURL = "",
                            IsApproved = false,
                            IsDeleted = false,
                            IsShowHome = false
                        },
                        new
                        {
                            GenreId = 74,
                            CreatedBy = new Guid("0b64f6f0-9f60-45c9-9e7b-f68ccc3fc57f"),
                            DateCreated = new DateTime(2023, 7, 15, 23, 20, 44, 321, DateTimeKind.Local).AddTicks(3837),
                            GenreImageURL = "",
                            IsApproved = false,
                            IsDeleted = false,
                            IsShowHome = false
                        },
                        new
                        {
                            GenreId = 75,
                            CreatedBy = new Guid("0b64f6f0-9f60-45c9-9e7b-f68ccc3fc57f"),
                            DateCreated = new DateTime(2023, 7, 15, 23, 20, 44, 321, DateTimeKind.Local).AddTicks(3838),
                            GenreImageURL = "",
                            IsApproved = false,
                            IsDeleted = false,
                            IsShowHome = false
                        },
                        new
                        {
                            GenreId = 76,
                            CreatedBy = new Guid("0b64f6f0-9f60-45c9-9e7b-f68ccc3fc57f"),
                            DateCreated = new DateTime(2023, 7, 15, 23, 20, 44, 321, DateTimeKind.Local).AddTicks(3838),
                            GenreImageURL = "",
                            IsApproved = false,
                            IsDeleted = false,
                            IsShowHome = false
                        });
                });

            modelBuilder.Entity("HikiComic.Data.Entities.GenreDetail", b =>
                {
                    b.Property<int>("GenreDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GenreDetailId"), 1L, 1);

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<int>("GenreId")
                        .HasColumnType("int");

                    b.Property<string>("GenreName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("GenreSEOAlias")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("GenreSEOSummary")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("GenreSEOTitle")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Summary")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("GenreDetailId");

                    b.HasIndex("GenreId")
                        .IsUnique();

                    b.ToTable("GenreDetails", (string)null);

                    b.HasData(
                        new
                        {
                            GenreDetailId = 1,
                            CreatedBy = new Guid("0b64f6f0-9f60-45c9-9e7b-f68ccc3fc57f"),
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GenreId = 1,
                            GenreName = "Updating",
                            GenreSEOAlias = "updating-391314",
                            GenreSEOSummary = "Updating SEO Summary - HIKICOMIC",
                            GenreSEOTitle = "Updating SEO Title - HIKICOMIC",
                            IsDeleted = false,
                            Summary = "Updating Summary - HIKICOMIC"
                        },
                        new
                        {
                            GenreDetailId = 2,
                            CreatedBy = new Guid("0b64f6f0-9f60-45c9-9e7b-f68ccc3fc57f"),
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GenreId = 2,
                            GenreName = "Action",
                            GenreSEOAlias = "action-304301",
                            GenreSEOSummary = "Updating SEO Summary - HIKICOMIC",
                            GenreSEOTitle = "Updating SEO Title - HIKICOMIC",
                            IsDeleted = false,
                            Summary = "A genre focused on physical action, often involving fighting or combat scenes. Action stories are typically fast-paced and thrilling, with a lot of movement and high stakes."
                        },
                        new
                        {
                            GenreDetailId = 3,
                            CreatedBy = new Guid("0b64f6f0-9f60-45c9-9e7b-f68ccc3fc57f"),
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GenreId = 3,
                            GenreName = "Adaptation",
                            GenreSEOAlias = "adaptation-934546",
                            GenreSEOSummary = "Updating SEO Summary - HIKICOMIC",
                            GenreSEOTitle = "Updating SEO Title - HIKICOMIC",
                            IsDeleted = false,
                            Summary = "A genre that is based on existing source material, such as a novel, manga, or video game. Adaptations can be faithful or loose, and can vary greatly in terms of how closely they follow the source material."
                        },
                        new
                        {
                            GenreDetailId = 4,
                            CreatedBy = new Guid("0b64f6f0-9f60-45c9-9e7b-f68ccc3fc57f"),
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GenreId = 4,
                            GenreName = "Adult",
                            GenreSEOAlias = "adult-774714",
                            GenreSEOSummary = "Updating SEO Summary - HIKICOMIC",
                            GenreSEOTitle = "Updating SEO Title - HIKICOMIC",
                            IsDeleted = false,
                            Summary = "A genre that contains explicit sexual content and/or graphic violence. Adult stories are typically intended for mature audiences only, and may explore taboo or controversial subjects."
                        },
                        new
                        {
                            GenreDetailId = 5,
                            CreatedBy = new Guid("0b64f6f0-9f60-45c9-9e7b-f68ccc3fc57f"),
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GenreId = 5,
                            GenreName = "Adventure",
                            GenreSEOAlias = "adventure-300184",
                            GenreSEOSummary = "Updating SEO Summary - HIKICOMIC",
                            GenreSEOTitle = "Updating SEO Title - HIKICOMIC",
                            IsDeleted = false,
                            Summary = "A genre focused on exploration, often involving exotic locations, treasure hunting, or quests. Adventure stories are typically exciting and full of surprises, with a strong sense of adventure and discovery."
                        },
                        new
                        {
                            GenreDetailId = 6,
                            CreatedBy = new Guid("0b64f6f0-9f60-45c9-9e7b-f68ccc3fc57f"),
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GenreId = 6,
                            GenreName = "Animal",
                            GenreSEOAlias = "animal-305529",
                            GenreSEOSummary = "Updating SEO Summary - HIKICOMIC",
                            GenreSEOTitle = "Updating SEO Title - HIKICOMIC",
                            IsDeleted = false,
                            Summary = "A genre that features animals as main characters or as a significant aspect of the story. Animal stories can be anthropomorphic or realistic, and often explore themes related to nature, survival, and the animal kingdom."
                        },
                        new
                        {
                            GenreDetailId = 7,
                            CreatedBy = new Guid("0b64f6f0-9f60-45c9-9e7b-f68ccc3fc57f"),
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GenreId = 7,
                            GenreName = "Chinese",
                            GenreSEOAlias = "chinese-993685",
                            GenreSEOSummary = "Updating SEO Summary - HIKICOMIC",
                            GenreSEOTitle = "Updating SEO Title - HIKICOMIC",
                            IsDeleted = false,
                            Summary = "A genre that originates from China or is heavily influenced by Chinese culture. Chinese stories can vary greatly in terms of style and subject matter, but often feature elements such as martial arts, mythology, and historical drama."
                        },
                        new
                        {
                            GenreDetailId = 8,
                            CreatedBy = new Guid("0b64f6f0-9f60-45c9-9e7b-f68ccc3fc57f"),
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GenreId = 8,
                            GenreName = "Comedy",
                            GenreSEOAlias = "comedy-262691",
                            GenreSEOSummary = "Updating SEO Summary - HIKICOMIC",
                            GenreSEOTitle = "Updating SEO Title - HIKICOMIC",
                            IsDeleted = false,
                            Summary = "A genre focused on humor and comedic situations. Comedy stories can range from light-hearted and silly to dark and satirical, and often involve witty banter, physical comedy, or absurd situations."
                        },
                        new
                        {
                            GenreDetailId = 9,
                            CreatedBy = new Guid("0b64f6f0-9f60-45c9-9e7b-f68ccc3fc57f"),
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GenreId = 9,
                            GenreName = "Comic",
                            GenreSEOAlias = "comic-547961",
                            GenreSEOSummary = "Updating SEO Summary - HIKICOMIC",
                            GenreSEOTitle = "Updating SEO Title - HIKICOMIC",
                            IsDeleted = false,
                            Summary = "A genre that originates from comic strips or comic books. Comic stories can be funny or serious, and often feature unique visual styles, such as exaggerated character designs, bold colors, and dynamic panel layouts."
                        },
                        new
                        {
                            GenreDetailId = 10,
                            CreatedBy = new Guid("0b64f6f0-9f60-45c9-9e7b-f68ccc3fc57f"),
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GenreId = 10,
                            GenreName = "Cooking",
                            GenreSEOAlias = "cooking-860807",
                            GenreSEOSummary = "Updating SEO Summary - HIKICOMIC",
                            GenreSEOTitle = "Updating SEO Title - HIKICOMIC",
                            IsDeleted = false,
                            Summary = "A genre focused on cooking and food preparation. Cooking stories often explore the art and science of cooking, as well as the cultural and social significance of food. They may also involve elements of drama, romance, or competition."
                        },
                        new
                        {
                            GenreDetailId = 11,
                            CreatedBy = new Guid("0b64f6f0-9f60-45c9-9e7b-f68ccc3fc57f"),
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GenreId = 11,
                            GenreName = "Crime",
                            GenreSEOAlias = "crime-819021",
                            GenreSEOSummary = "Updating SEO Summary - HIKICOMIC",
                            GenreSEOTitle = "Updating SEO Title - HIKICOMIC",
                            IsDeleted = false,
                            Summary = "A genre focused on crime and criminal activity. Crime stories can be gritty and realistic or stylized and pulpy, and often involve elements such as detectives, heists, or organized crime."
                        },
                        new
                        {
                            GenreDetailId = 12,
                            CreatedBy = new Guid("0b64f6f0-9f60-45c9-9e7b-f68ccc3fc57f"),
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GenreId = 12,
                            GenreName = "Crossdressing",
                            GenreSEOAlias = "crossdressing-730811",
                            GenreSEOSummary = "Updating SEO Summary - HIKICOMIC",
                            GenreSEOTitle = "Updating SEO Title - HIKICOMIC",
                            IsDeleted = false,
                            Summary = "Involves characters who dress in clothing traditionally associated with the opposite gender."
                        },
                        new
                        {
                            GenreDetailId = 13,
                            CreatedBy = new Guid("0b64f6f0-9f60-45c9-9e7b-f68ccc3fc57f"),
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GenreId = 13,
                            GenreName = "Demons",
                            GenreSEOAlias = "demons-698466",
                            GenreSEOSummary = "Updating SEO Summary - HIKICOMIC",
                            GenreSEOTitle = "Updating SEO Title - HIKICOMIC",
                            IsDeleted = false,
                            Summary = "Involves supernatural creatures who are often malevolent towards humans."
                        },
                        new
                        {
                            GenreDetailId = 14,
                            CreatedBy = new Guid("0b64f6f0-9f60-45c9-9e7b-f68ccc3fc57f"),
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GenreId = 14,
                            GenreName = "Drama",
                            GenreSEOAlias = "drama-310439",
                            GenreSEOSummary = "Updating SEO Summary - HIKICOMIC",
                            GenreSEOTitle = "Updating SEO Title - HIKICOMIC",
                            IsDeleted = false,
                            Summary = "Focuses on realistic, often emotional, conflicts between characters."
                        },
                        new
                        {
                            GenreDetailId = 15,
                            CreatedBy = new Guid("0b64f6f0-9f60-45c9-9e7b-f68ccc3fc57f"),
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GenreId = 15,
                            GenreName = "Ecchi",
                            GenreSEOAlias = "ecchi-837736",
                            GenreSEOSummary = "Updating SEO Summary - HIKICOMIC",
                            GenreSEOTitle = "Updating SEO Title - HIKICOMIC",
                            IsDeleted = false,
                            Summary = "Contains sexual themes and humor, but is less explicit than hentai."
                        },
                        new
                        {
                            GenreDetailId = 16,
                            CreatedBy = new Guid("0b64f6f0-9f60-45c9-9e7b-f68ccc3fc57f"),
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GenreId = 16,
                            GenreName = "Fantasy",
                            GenreSEOAlias = "fantasy-445140",
                            GenreSEOSummary = "Updating SEO Summary - HIKICOMIC",
                            GenreSEOTitle = "Updating SEO Title - HIKICOMIC",
                            IsDeleted = false,
                            Summary = "Involves elements of magic, supernatural powers, and mythical creatures."
                        },
                        new
                        {
                            GenreDetailId = 17,
                            CreatedBy = new Guid("0b64f6f0-9f60-45c9-9e7b-f68ccc3fc57f"),
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GenreId = 17,
                            GenreName = "Full Color",
                            GenreSEOAlias = "full-color-870413",
                            GenreSEOSummary = "Updating SEO Summary - HIKICOMIC",
                            GenreSEOTitle = "Updating SEO Title - HIKICOMIC",
                            IsDeleted = false,
                            Summary = "Comics or manga that are colored, rather than black and white."
                        },
                        new
                        {
                            GenreDetailId = 18,
                            CreatedBy = new Guid("0b64f6f0-9f60-45c9-9e7b-f68ccc3fc57f"),
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GenreId = 18,
                            GenreName = "Game",
                            GenreSEOAlias = "game-107608",
                            GenreSEOSummary = "Updating SEO Summary - HIKICOMIC",
                            GenreSEOTitle = "Updating SEO Title - HIKICOMIC",
                            IsDeleted = false,
                            Summary = "Involves characters playing games, whether video games or other types."
                        },
                        new
                        {
                            GenreDetailId = 19,
                            CreatedBy = new Guid("0b64f6f0-9f60-45c9-9e7b-f68ccc3fc57f"),
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GenreId = 19,
                            GenreName = "Gender Bender",
                            GenreSEOAlias = "gender-bender-321894",
                            GenreSEOSummary = "Updating SEO Summary - HIKICOMIC",
                            GenreSEOTitle = "Updating SEO Title - HIKICOMIC",
                            IsDeleted = false,
                            Summary = "Involves characters who switch or blur gender roles, often through magic or supernatural means."
                        },
                        new
                        {
                            GenreDetailId = 20,
                            CreatedBy = new Guid("0b64f6f0-9f60-45c9-9e7b-f68ccc3fc57f"),
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GenreId = 20,
                            GenreName = "Gore",
                            GenreSEOAlias = "gore-834307",
                            GenreSEOSummary = "Updating SEO Summary - HIKICOMIC",
                            GenreSEOTitle = "Updating SEO Title - HIKICOMIC",
                            IsDeleted = false,
                            Summary = "Involves graphic violence and bloodshed."
                        },
                        new
                        {
                            GenreDetailId = 21,
                            CreatedBy = new Guid("0b64f6f0-9f60-45c9-9e7b-f68ccc3fc57f"),
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GenreId = 21,
                            GenreName = "Gyaru",
                            GenreSEOAlias = "gyaru-576806",
                            GenreSEOSummary = "Updating SEO Summary - HIKICOMIC",
                            GenreSEOTitle = "Updating SEO Title - HIKICOMIC",
                            IsDeleted = false,
                            Summary = "Involves characters, usually female, who dress in a flamboyant and trendy style popularized by Japanese youth culture."
                        },
                        new
                        {
                            GenreDetailId = 22,
                            CreatedBy = new Guid("0b64f6f0-9f60-45c9-9e7b-f68ccc3fc57f"),
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GenreId = 22,
                            GenreName = "Harem",
                            GenreSEOAlias = "harem-234937",
                            GenreSEOSummary = "Updating SEO Summary - HIKICOMIC",
                            GenreSEOTitle = "Updating SEO Title - HIKICOMIC",
                            IsDeleted = false,
                            Summary = "Involves one male character surrounded by multiple female characters, often with romantic undertones."
                        },
                        new
                        {
                            GenreDetailId = 23,
                            CreatedBy = new Guid("0b64f6f0-9f60-45c9-9e7b-f68ccc3fc57f"),
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GenreId = 23,
                            GenreName = "Historical",
                            GenreSEOAlias = "historical-253593",
                            GenreSEOSummary = "Updating SEO Summary - HIKICOMIC",
                            GenreSEOTitle = "Updating SEO Title - HIKICOMIC",
                            IsDeleted = false,
                            Summary = "Set in a specific time period or historical era, often with a focus on accuracy and realism."
                        },
                        new
                        {
                            GenreDetailId = 24,
                            CreatedBy = new Guid("0b64f6f0-9f60-45c9-9e7b-f68ccc3fc57f"),
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GenreId = 24,
                            GenreName = "Horror",
                            GenreSEOAlias = "horror-530733",
                            GenreSEOSummary = "Updating SEO Summary - HIKICOMIC",
                            GenreSEOTitle = "Updating SEO Title - HIKICOMIC",
                            IsDeleted = false,
                            Summary = "Involves supernatural or otherwise terrifying elements that aim to frighten the reader."
                        },
                        new
                        {
                            GenreDetailId = 25,
                            CreatedBy = new Guid("0b64f6f0-9f60-45c9-9e7b-f68ccc3fc57f"),
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GenreId = 25,
                            GenreName = "Isekai",
                            GenreSEOAlias = "isekai-432467",
                            GenreSEOSummary = "Updating SEO Summary - HIKICOMIC",
                            GenreSEOTitle = "Updating SEO Title - HIKICOMIC",
                            IsDeleted = false,
                            Summary = "Involves characters who are transported to a different world or parallel universe."
                        },
                        new
                        {
                            GenreDetailId = 26,
                            CreatedBy = new Guid("0b64f6f0-9f60-45c9-9e7b-f68ccc3fc57f"),
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GenreId = 26,
                            GenreName = "Josei",
                            GenreSEOAlias = "josei-506035",
                            GenreSEOSummary = "Updating SEO Summary - HIKICOMIC",
                            GenreSEOTitle = "Updating SEO Title - HIKICOMIC",
                            IsDeleted = false,
                            Summary = "Targeted at adult women and often features more mature and realistic themes than shoujo manga."
                        },
                        new
                        {
                            GenreDetailId = 27,
                            CreatedBy = new Guid("0b64f6f0-9f60-45c9-9e7b-f68ccc3fc57f"),
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GenreId = 27,
                            GenreName = "Kids",
                            GenreSEOAlias = "kids-982363",
                            GenreSEOSummary = "Updating SEO Summary - HIKICOMIC",
                            GenreSEOTitle = "Updating SEO Title - HIKICOMIC",
                            IsDeleted = false,
                            Summary = "Targeted at children, often with simple storylines and morals to teach."
                        },
                        new
                        {
                            GenreDetailId = 28,
                            CreatedBy = new Guid("0b64f6f0-9f60-45c9-9e7b-f68ccc3fc57f"),
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GenreId = 28,
                            GenreName = "Korean",
                            GenreSEOAlias = "korean-104879",
                            GenreSEOSummary = "Updating SEO Summary - HIKICOMIC",
                            GenreSEOTitle = "Updating SEO Title - HIKICOMIC",
                            IsDeleted = false,
                            Summary = "Originates from South Korea or is heavily influenced by Korean culture."
                        },
                        new
                        {
                            GenreDetailId = 29,
                            CreatedBy = new Guid("0b64f6f0-9f60-45c9-9e7b-f68ccc3fc57f"),
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GenreId = 29,
                            GenreName = "Liexing",
                            GenreSEOAlias = "liexing-525129",
                            GenreSEOSummary = "Updating SEO Summary - HIKICOMIC",
                            GenreSEOTitle = "Updating SEO Title - HIKICOMIC",
                            IsDeleted = false,
                            Summary = "Involves characters with superpowers, often set in a martial arts or wuxia-inspired setting."
                        },
                        new
                        {
                            GenreDetailId = 30,
                            CreatedBy = new Guid("0b64f6f0-9f60-45c9-9e7b-f68ccc3fc57f"),
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GenreId = 30,
                            GenreName = "Loli",
                            GenreSEOAlias = "loli-569249",
                            GenreSEOSummary = "Updating SEO Summary - HIKICOMIC",
                            GenreSEOTitle = "Updating SEO Title - HIKICOMIC",
                            IsDeleted = false,
                            Summary = "Involves young or childlike female characters, often with a focus on their cuteness."
                        },
                        new
                        {
                            GenreDetailId = 31,
                            CreatedBy = new Guid("0b64f6f0-9f60-45c9-9e7b-f68ccc3fc57f"),
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GenreId = 31,
                            GenreName = "Magic",
                            GenreSEOAlias = "magic-574842",
                            GenreSEOSummary = "Updating SEO Summary - HIKICOMIC",
                            GenreSEOTitle = "Updating SEO Title - HIKICOMIC",
                            IsDeleted = false,
                            Summary = "Involves characters with magical powers, often in a fantasy setting."
                        },
                        new
                        {
                            GenreDetailId = 32,
                            CreatedBy = new Guid("0b64f6f0-9f60-45c9-9e7b-f68ccc3fc57f"),
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GenreId = 32,
                            GenreName = "Manga",
                            GenreSEOAlias = "manga-933975",
                            GenreSEOSummary = "Updating SEO Summary - HIKICOMIC",
                            GenreSEOTitle = "Updating SEO Title - HIKICOMIC",
                            IsDeleted = false,
                            Summary = "Japanese comics that are typically serialized in magazines and collected into tankobon volumes"
                        },
                        new
                        {
                            GenreDetailId = 33,
                            CreatedBy = new Guid("0b64f6f0-9f60-45c9-9e7b-f68ccc3fc57f"),
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GenreId = 33,
                            GenreName = "Manhua",
                            GenreSEOAlias = "manhua-244576",
                            GenreSEOSummary = "Updating SEO Summary - HIKICOMIC",
                            GenreSEOTitle = "Updating SEO Title - HIKICOMIC",
                            IsDeleted = false,
                            Summary = "Chinese comics produced in mainland China, Hong Kong, and Taiwan"
                        },
                        new
                        {
                            GenreDetailId = 34,
                            CreatedBy = new Guid("0b64f6f0-9f60-45c9-9e7b-f68ccc3fc57f"),
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GenreId = 34,
                            GenreName = "Manhwa",
                            GenreSEOAlias = "manhwa-350029",
                            GenreSEOSummary = "Updating SEO Summary - HIKICOMIC",
                            GenreSEOTitle = "Updating SEO Title - HIKICOMIC",
                            IsDeleted = false,
                            Summary = "Korean comics"
                        },
                        new
                        {
                            GenreDetailId = 35,
                            CreatedBy = new Guid("0b64f6f0-9f60-45c9-9e7b-f68ccc3fc57f"),
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GenreId = 35,
                            GenreName = "Martial Arts",
                            GenreSEOAlias = "martial-arts-815171",
                            GenreSEOSummary = "Updating SEO Summary - HIKICOMIC",
                            GenreSEOTitle = "Updating SEO Title - HIKICOMIC",
                            IsDeleted = false,
                            Summary = "Genre focused on martial arts and hand-to-hand combat"
                        },
                        new
                        {
                            GenreDetailId = 36,
                            CreatedBy = new Guid("0b64f6f0-9f60-45c9-9e7b-f68ccc3fc57f"),
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GenreId = 36,
                            GenreName = "Mature",
                            GenreSEOAlias = "mature-520359",
                            GenreSEOSummary = "Updating SEO Summary - HIKICOMIC",
                            GenreSEOTitle = "Updating SEO Title - HIKICOMIC",
                            IsDeleted = false,
                            Summary = "Contains themes and content that may not be suitable for younger readers"
                        },
                        new
                        {
                            GenreDetailId = 37,
                            CreatedBy = new Guid("0b64f6f0-9f60-45c9-9e7b-f68ccc3fc57f"),
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GenreId = 37,
                            GenreName = "Medical",
                            GenreSEOAlias = "medical-187458",
                            GenreSEOSummary = "Updating SEO Summary - HIKICOMIC",
                            GenreSEOTitle = "Updating SEO Title - HIKICOMIC",
                            IsDeleted = false,
                            Summary = "Genre focused on medical professionals and their work"
                        },
                        new
                        {
                            GenreDetailId = 38,
                            CreatedBy = new Guid("0b64f6f0-9f60-45c9-9e7b-f68ccc3fc57f"),
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GenreId = 38,
                            GenreName = "Military",
                            GenreSEOAlias = "military-737144",
                            GenreSEOSummary = "Updating SEO Summary - HIKICOMIC",
                            GenreSEOTitle = "Updating SEO Title - HIKICOMIC",
                            IsDeleted = false,
                            Summary = "Genre focused on warfare and military operations"
                        },
                        new
                        {
                            GenreDetailId = 39,
                            CreatedBy = new Guid("0b64f6f0-9f60-45c9-9e7b-f68ccc3fc57f"),
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GenreId = 39,
                            GenreName = "Moder",
                            GenreSEOAlias = "moder-982246",
                            GenreSEOSummary = "Updating SEO Summary - HIKICOMIC",
                            GenreSEOTitle = "Updating SEO Title - HIKICOMIC",
                            IsDeleted = false,
                            Summary = "Moderate content that may be suitable for all ages"
                        },
                        new
                        {
                            GenreDetailId = 40,
                            CreatedBy = new Guid("0b64f6f0-9f60-45c9-9e7b-f68ccc3fc57f"),
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GenreId = 40,
                            GenreName = "Monster",
                            GenreSEOAlias = "monster-332277",
                            GenreSEOSummary = "Updating SEO Summary - HIKICOMIC",
                            GenreSEOTitle = "Updating SEO Title - HIKICOMIC",
                            IsDeleted = false,
                            Summary = "Features creatures or beings that are not human, often with superhuman powers"
                        },
                        new
                        {
                            GenreDetailId = 41,
                            CreatedBy = new Guid("0b64f6f0-9f60-45c9-9e7b-f68ccc3fc57f"),
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GenreId = 41,
                            GenreName = "Monsters",
                            GenreSEOAlias = "monsters-494836",
                            GenreSEOSummary = "Updating SEO Summary - HIKICOMIC",
                            GenreSEOTitle = "Updating SEO Title - HIKICOMIC",
                            IsDeleted = false,
                            Summary = "Similar to Monster, but with multiple non-human creatures as opposed to a single entity"
                        },
                        new
                        {
                            GenreDetailId = 42,
                            CreatedBy = new Guid("0b64f6f0-9f60-45c9-9e7b-f68ccc3fc57f"),
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GenreId = 42,
                            GenreName = "Murim",
                            GenreSEOAlias = "murim-488176",
                            GenreSEOSummary = "Updating SEO Summary - HIKICOMIC",
                            GenreSEOTitle = "Updating SEO Title - HIKICOMIC",
                            IsDeleted = false,
                            Summary = "Korean genre focused on martial arts, cultivation, and adventure"
                        },
                        new
                        {
                            GenreDetailId = 43,
                            CreatedBy = new Guid("0b64f6f0-9f60-45c9-9e7b-f68ccc3fc57f"),
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GenreId = 43,
                            GenreName = "Music",
                            GenreSEOAlias = "music-624300",
                            GenreSEOSummary = "Updating SEO Summary - HIKICOMIC",
                            GenreSEOTitle = "Updating SEO Title - HIKICOMIC",
                            IsDeleted = false,
                            Summary = "Genre focused on music and musicians"
                        },
                        new
                        {
                            GenreDetailId = 44,
                            CreatedBy = new Guid("0b64f6f0-9f60-45c9-9e7b-f68ccc3fc57f"),
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GenreId = 44,
                            GenreName = "Mystery",
                            GenreSEOAlias = "mystery-471578",
                            GenreSEOSummary = "Updating SEO Summary - HIKICOMIC",
                            GenreSEOTitle = "Updating SEO Title - HIKICOMIC",
                            IsDeleted = false,
                            Summary = "Genre focused on solving puzzles or mysteries"
                        },
                        new
                        {
                            GenreDetailId = 45,
                            CreatedBy = new Guid("0b64f6f0-9f60-45c9-9e7b-f68ccc3fc57f"),
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GenreId = 45,
                            GenreName = "Office workers",
                            GenreSEOAlias = "office-workers-331875",
                            GenreSEOSummary = "Updating SEO Summary - HIKICOMIC",
                            GenreSEOTitle = "Updating SEO Title - HIKICOMIC",
                            IsDeleted = false,
                            Summary = "Genre focused on the lives and work of office employees"
                        },
                        new
                        {
                            GenreDetailId = 46,
                            CreatedBy = new Guid("0b64f6f0-9f60-45c9-9e7b-f68ccc3fc57f"),
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GenreId = 46,
                            GenreName = "One shot",
                            GenreSEOAlias = "one-shot-132635",
                            GenreSEOSummary = "Updating SEO Summary - HIKICOMIC",
                            GenreSEOTitle = "Updating SEO Title - HIKICOMIC",
                            IsDeleted = false,
                            Summary = "A standalone story or short manga, typically not serialized"
                        },
                        new
                        {
                            GenreDetailId = 47,
                            CreatedBy = new Guid("0b64f6f0-9f60-45c9-9e7b-f68ccc3fc57f"),
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GenreId = 47,
                            GenreName = "Ping Ping Jun",
                            GenreSEOAlias = "ping-ping-jun-870281",
                            GenreSEOSummary = "Updating SEO Summary - HIKICOMIC",
                            GenreSEOTitle = "Updating SEO Title - HIKICOMIC",
                            IsDeleted = false,
                            Summary = "A genre of Chinese comics that are typically short and humorous"
                        },
                        new
                        {
                            GenreDetailId = 48,
                            CreatedBy = new Guid("0b64f6f0-9f60-45c9-9e7b-f68ccc3fc57f"),
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GenreId = 48,
                            GenreName = "Police",
                            GenreSEOAlias = "police-615043",
                            GenreSEOSummary = "Updating SEO Summary - HIKICOMIC",
                            GenreSEOTitle = "Updating SEO Title - HIKICOMIC",
                            IsDeleted = false,
                            Summary = "Genre focused on police work and investigations"
                        },
                        new
                        {
                            GenreDetailId = 49,
                            CreatedBy = new Guid("0b64f6f0-9f60-45c9-9e7b-f68ccc3fc57f"),
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GenreId = 49,
                            GenreName = "Post apocalyptic",
                            GenreSEOAlias = "post-apocalyptic-508983",
                            GenreSEOSummary = "Updating SEO Summary - HIKICOMIC",
                            GenreSEOTitle = "Updating SEO Title - HIKICOMIC",
                            IsDeleted = false,
                            Summary = "Set in a world after a catastrophic event, often involving survival and rebuilding"
                        },
                        new
                        {
                            GenreDetailId = 50,
                            CreatedBy = new Guid("0b64f6f0-9f60-45c9-9e7b-f68ccc3fc57f"),
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GenreId = 50,
                            GenreName = "Psychological",
                            GenreSEOAlias = "psychological-566138",
                            GenreSEOSummary = "Updating SEO Summary - HIKICOMIC",
                            GenreSEOTitle = "Updating SEO Title - HIKICOMIC",
                            IsDeleted = false,
                            Summary = "Genre focused on the human mind and mental states"
                        },
                        new
                        {
                            GenreDetailId = 51,
                            CreatedBy = new Guid("0b64f6f0-9f60-45c9-9e7b-f68ccc3fc57f"),
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GenreId = 51,
                            GenreName = "Reincarnation",
                            GenreSEOAlias = "reincarnation-652399",
                            GenreSEOSummary = "Updating SEO Summary - HIKICOMIC",
                            GenreSEOTitle = "Updating SEO Title - HIKICOMIC",
                            IsDeleted = false,
                            Summary = "Features characters who are reincarnated or transported to another world or time"
                        },
                        new
                        {
                            GenreDetailId = 52,
                            CreatedBy = new Guid("0b64f6f0-9f60-45c9-9e7b-f68ccc3fc57f"),
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GenreId = 52,
                            GenreName = "Reverse",
                            GenreSEOAlias = "reverse-298615",
                            GenreSEOSummary = "Updating SEO Summary - HIKICOMIC",
                            GenreSEOTitle = "Updating SEO Title - HIKICOMIC",
                            IsDeleted = false,
                            Summary = "A story where the gender roles of the main characters are reversed"
                        },
                        new
                        {
                            GenreDetailId = 53,
                            CreatedBy = new Guid("0b64f6f0-9f60-45c9-9e7b-f68ccc3fc57f"),
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GenreId = 53,
                            GenreName = "Reverse harem",
                            GenreSEOAlias = "reverse-harem-871746",
                            GenreSEOSummary = "Updating SEO Summary - HIKICOMIC",
                            GenreSEOTitle = "Updating SEO Title - HIKICOMIC",
                            IsDeleted = false,
                            Summary = "A genre typically featuring a female protagonist surrounded by multiple male love interests"
                        },
                        new
                        {
                            GenreDetailId = 54,
                            CreatedBy = new Guid("0b64f6f0-9f60-45c9-9e7b-f68ccc3fc57f"),
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GenreId = 54,
                            GenreName = "Romance",
                            GenreSEOAlias = "romance-505289",
                            GenreSEOSummary = "Updating SEO Summary - HIKICOMIC",
                            GenreSEOTitle = "Updating SEO Title - HIKICOMIC",
                            IsDeleted = false,
                            Summary = "A genre focused on romantic relationships between characters"
                        },
                        new
                        {
                            GenreDetailId = 55,
                            CreatedBy = new Guid("0b64f6f0-9f60-45c9-9e7b-f68ccc3fc57f"),
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GenreId = 55,
                            GenreName = "Royal family",
                            GenreSEOAlias = "royal-family-209618",
                            GenreSEOSummary = "Updating SEO Summary - HIKICOMIC",
                            GenreSEOTitle = "Updating SEO Title - HIKICOMIC",
                            IsDeleted = false,
                            Summary = "A genre that involves royalty, aristocracy, or other nobility"
                        },
                        new
                        {
                            GenreDetailId = 56,
                            CreatedBy = new Guid("0b64f6f0-9f60-45c9-9e7b-f68ccc3fc57f"),
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GenreId = 56,
                            GenreName = "School Life",
                            GenreSEOAlias = "school-life-515479",
                            GenreSEOSummary = "Updating SEO Summary - HIKICOMIC",
                            GenreSEOTitle = "Updating SEO Title - HIKICOMIC",
                            IsDeleted = false,
                            Summary = "A genre focused on the daily lives of students attending school"
                        },
                        new
                        {
                            GenreDetailId = 57,
                            CreatedBy = new Guid("0b64f6f0-9f60-45c9-9e7b-f68ccc3fc57f"),
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GenreId = 57,
                            GenreName = "Sci-fi",
                            GenreSEOAlias = "sci-fi-735975",
                            GenreSEOSummary = "Updating SEO Summary - HIKICOMIC",
                            GenreSEOTitle = "Updating SEO Title - HIKICOMIC",
                            IsDeleted = false,
                            Summary = "A genre that involves speculative or imaginary concepts related to science and technology"
                        },
                        new
                        {
                            GenreDetailId = 58,
                            CreatedBy = new Guid("0b64f6f0-9f60-45c9-9e7b-f68ccc3fc57f"),
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GenreId = 58,
                            GenreName = "Seinen",
                            GenreSEOAlias = "seinen-619518",
                            GenreSEOSummary = "Updating SEO Summary - HIKICOMIC",
                            GenreSEOTitle = "Updating SEO Title - HIKICOMIC",
                            IsDeleted = false,
                            Summary = "A genre targeted towards adult men"
                        },
                        new
                        {
                            GenreDetailId = 59,
                            CreatedBy = new Guid("0b64f6f0-9f60-45c9-9e7b-f68ccc3fc57f"),
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GenreId = 59,
                            GenreName = "Shoujo",
                            GenreSEOAlias = "shoujo-733458",
                            GenreSEOSummary = "Updating SEO Summary - HIKICOMIC",
                            GenreSEOTitle = "Updating SEO Title - HIKICOMIC",
                            IsDeleted = false,
                            Summary = "A genre targeted towards teenage girls"
                        },
                        new
                        {
                            GenreDetailId = 60,
                            CreatedBy = new Guid("0b64f6f0-9f60-45c9-9e7b-f68ccc3fc57f"),
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GenreId = 60,
                            GenreName = "Shoujo ai",
                            GenreSEOAlias = "shoujo-ai-648025",
                            GenreSEOSummary = "Updating SEO Summary - HIKICOMIC",
                            GenreSEOTitle = "Updating SEO Title - HIKICOMIC",
                            IsDeleted = false,
                            Summary = "A genre focused on romantic relationships between female characters"
                        },
                        new
                        {
                            GenreDetailId = 61,
                            CreatedBy = new Guid("0b64f6f0-9f60-45c9-9e7b-f68ccc3fc57f"),
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GenreId = 61,
                            GenreName = "Shounen",
                            GenreSEOAlias = "shounen-737005",
                            GenreSEOSummary = "Updating SEO Summary - HIKICOMIC",
                            GenreSEOTitle = "Updating SEO Title - HIKICOMIC",
                            IsDeleted = false,
                            Summary = "A genre targeted towards teenage boys"
                        },
                        new
                        {
                            GenreDetailId = 62,
                            CreatedBy = new Guid("0b64f6f0-9f60-45c9-9e7b-f68ccc3fc57f"),
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GenreId = 62,
                            GenreName = "Shounen ai",
                            GenreSEOAlias = "shounen-ai-879165",
                            GenreSEOSummary = "Updating SEO Summary - HIKICOMIC",
                            GenreSEOTitle = "Updating SEO Title - HIKICOMIC",
                            IsDeleted = false,
                            Summary = "A genre focused on romantic relationships between male characters"
                        },
                        new
                        {
                            GenreDetailId = 63,
                            CreatedBy = new Guid("0b64f6f0-9f60-45c9-9e7b-f68ccc3fc57f"),
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GenreId = 63,
                            GenreName = "Slice of Life",
                            GenreSEOAlias = "slice-of-life-940599",
                            GenreSEOSummary = "Updating SEO Summary - HIKICOMIC",
                            GenreSEOTitle = "Updating SEO Title - HIKICOMIC",
                            IsDeleted = false,
                            Summary = "A genre focused on everyday life experiences"
                        },
                        new
                        {
                            GenreDetailId = 64,
                            CreatedBy = new Guid("0b64f6f0-9f60-45c9-9e7b-f68ccc3fc57f"),
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GenreId = 64,
                            GenreName = "Smut",
                            GenreSEOAlias = "smut-635916",
                            GenreSEOSummary = "Updating SEO Summary - HIKICOMIC",
                            GenreSEOTitle = "Updating SEO Title - HIKICOMIC",
                            IsDeleted = false,
                            Summary = "A genre that includes explicit sexual content"
                        },
                        new
                        {
                            GenreDetailId = 65,
                            CreatedBy = new Guid("0b64f6f0-9f60-45c9-9e7b-f68ccc3fc57f"),
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GenreId = 65,
                            GenreName = "Sports",
                            GenreSEOAlias = "sports-417542",
                            GenreSEOSummary = "Updating SEO Summary - HIKICOMIC",
                            GenreSEOTitle = "Updating SEO Title - HIKICOMIC",
                            IsDeleted = false,
                            Summary = "A genre that involves sports or athletic competitions"
                        },
                        new
                        {
                            GenreDetailId = 66,
                            CreatedBy = new Guid("0b64f6f0-9f60-45c9-9e7b-f68ccc3fc57f"),
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GenreId = 66,
                            GenreName = "Super power",
                            GenreSEOAlias = "super-power-853064",
                            GenreSEOSummary = "Updating SEO Summary - HIKICOMIC",
                            GenreSEOTitle = "Updating SEO Title - HIKICOMIC",
                            IsDeleted = false,
                            Summary = "A genre that involves characters with supernatural abilities"
                        },
                        new
                        {
                            GenreDetailId = 67,
                            CreatedBy = new Guid("0b64f6f0-9f60-45c9-9e7b-f68ccc3fc57f"),
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GenreId = 67,
                            GenreName = "Supernatural",
                            GenreSEOAlias = "supernatural-814683",
                            GenreSEOSummary = "Updating SEO Summary - HIKICOMIC",
                            GenreSEOTitle = "Updating SEO Title - HIKICOMIC",
                            IsDeleted = false,
                            Summary = "A genre that involves supernatural or paranormal elements"
                        },
                        new
                        {
                            GenreDetailId = 68,
                            CreatedBy = new Guid("0b64f6f0-9f60-45c9-9e7b-f68ccc3fc57f"),
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GenreId = 68,
                            GenreName = "Survival",
                            GenreSEOAlias = "survival-268998",
                            GenreSEOSummary = "Updating SEO Summary - HIKICOMIC",
                            GenreSEOTitle = "Updating SEO Title - HIKICOMIC",
                            IsDeleted = false,
                            Summary = "A genre that involves characters struggling to survive in a challenging environment"
                        },
                        new
                        {
                            GenreDetailId = 69,
                            CreatedBy = new Guid("0b64f6f0-9f60-45c9-9e7b-f68ccc3fc57f"),
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GenreId = 69,
                            GenreName = "Thriller",
                            GenreSEOAlias = "thriller-499105",
                            GenreSEOSummary = "Updating SEO Summary - HIKICOMIC",
                            GenreSEOTitle = "Updating SEO Title - HIKICOMIC",
                            IsDeleted = false,
                            Summary = "A genre that involves suspense, excitement, and high tension"
                        },
                        new
                        {
                            GenreDetailId = 70,
                            CreatedBy = new Guid("0b64f6f0-9f60-45c9-9e7b-f68ccc3fc57f"),
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GenreId = 70,
                            GenreName = "Time Travel",
                            GenreSEOAlias = "time-travel-766708",
                            GenreSEOSummary = "Updating SEO Summary - HIKICOMIC",
                            GenreSEOTitle = "Updating SEO Title - HIKICOMIC",
                            IsDeleted = false,
                            Summary = "A genre that involves characters traveling through time"
                        },
                        new
                        {
                            GenreDetailId = 71,
                            CreatedBy = new Guid("0b64f6f0-9f60-45c9-9e7b-f68ccc3fc57f"),
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GenreId = 71,
                            GenreName = "Tragedy",
                            GenreSEOAlias = "tragedy-858685",
                            GenreSEOSummary = "Updating SEO Summary - HIKICOMIC",
                            GenreSEOTitle = "Updating SEO Title - HIKICOMIC",
                            IsDeleted = false,
                            Summary = "A genre that involves sorrowful or disastrous events"
                        },
                        new
                        {
                            GenreDetailId = 72,
                            CreatedBy = new Guid("0b64f6f0-9f60-45c9-9e7b-f68ccc3fc57f"),
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GenreId = 72,
                            GenreName = "Violence",
                            GenreSEOAlias = "violence-746986",
                            GenreSEOSummary = "Updating SEO Summary - HIKICOMIC",
                            GenreSEOTitle = "Updating SEO Title - HIKICOMIC",
                            IsDeleted = false,
                            Summary = "Contains explicit and graphic depictions of violent acts, often with a focus on gore and brutality"
                        },
                        new
                        {
                            GenreDetailId = 73,
                            CreatedBy = new Guid("0b64f6f0-9f60-45c9-9e7b-f68ccc3fc57f"),
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GenreId = 73,
                            GenreName = "Webtoon",
                            GenreSEOAlias = "webtoon-740813",
                            GenreSEOSummary = "Updating SEO Summary - HIKICOMIC",
                            GenreSEOTitle = "Updating SEO Title - HIKICOMIC",
                            IsDeleted = false,
                            Summary = "A type of digital comic that originated in South Korea and is published in a vertical scrolling format optimized for viewing on mobile devices"
                        },
                        new
                        {
                            GenreDetailId = 74,
                            CreatedBy = new Guid("0b64f6f0-9f60-45c9-9e7b-f68ccc3fc57f"),
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GenreId = 74,
                            GenreName = "Webtoons",
                            GenreSEOAlias = "webtoons-298763",
                            GenreSEOSummary = "Updating SEO Summary - HIKICOMIC",
                            GenreSEOTitle = "Updating SEO Title - HIKICOMIC",
                            IsDeleted = false,
                            Summary = "A platform for publishing and reading webtoons, which are digital comics that originated in South Korea and are published in a vertical scrolling format optimized for viewing on mobile devices"
                        },
                        new
                        {
                            GenreDetailId = 75,
                            CreatedBy = new Guid("0b64f6f0-9f60-45c9-9e7b-f68ccc3fc57f"),
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GenreId = 75,
                            GenreName = "Yaoi",
                            GenreSEOAlias = "yaoi-986343",
                            GenreSEOSummary = "Updating SEO Summary - HIKICOMIC",
                            GenreSEOTitle = "Updating SEO Title - HIKICOMIC",
                            IsDeleted = false,
                            Summary = "A genre focused on male-male romantic relationships, often with explicit sexual content"
                        },
                        new
                        {
                            GenreDetailId = 76,
                            CreatedBy = new Guid("0b64f6f0-9f60-45c9-9e7b-f68ccc3fc57f"),
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GenreId = 76,
                            GenreName = "Zombies",
                            GenreSEOAlias = "zombies-506247",
                            GenreSEOSummary = "Updating SEO Summary - HIKICOMIC",
                            GenreSEOTitle = "Updating SEO Title - HIKICOMIC",
                            IsDeleted = false,
                            Summary = "Features zombies or other undead creatures as a significant aspect of the story, often with a focus on survival and/or horror"
                        });
                });

            modelBuilder.Entity("HikiComic.Data.Entities.GenreInComicDetail", b =>
                {
                    b.Property<int>("GenreId")
                        .HasColumnType("int");

                    b.Property<int>("ComicDetailId")
                        .HasColumnType("int");

                    b.HasKey("GenreId", "ComicDetailId");

                    b.HasIndex("ComicDetailId");

                    b.ToTable("GenreInComicDetails", (string)null);
                });

            modelBuilder.Entity("HikiComic.Data.Entities.Notification", b =>
                {
                    b.Property<int>("NotificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NotificationId"), 1L, 1);

                    b.Property<string>("Actions")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<Guid?>("AppUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("ChapterId")
                        .HasColumnType("int");

                    b.Property<int?>("ComicId")
                        .HasColumnType("int");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageURL")
                        .HasMaxLength(500)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsRead")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("NotificationPriority")
                        .HasColumnType("int");

                    b.Property<int>("NotificationType")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("NotificationId");

                    b.HasIndex("ChapterId");

                    b.HasIndex("ComicId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("Notifications", (string)null);
                });

            modelBuilder.Entity("HikiComic.Data.Entities.ServiceConfig", b =>
                {
                    b.Property<int>("ServiceConfigId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ServiceConfigId"), 1L, 1);

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Note")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("ServiceConfigName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("StringValue")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Value")
                        .HasColumnType("int");

                    b.HasKey("ServiceConfigId");

                    b.ToTable("ServiceConfigs", (string)null);

                    b.HasData(
                        new
                        {
                            ServiceConfigId = 1,
                            CreatedBy = new Guid("0b64f6f0-9f60-45c9-9e7b-f68ccc3fc57f"),
                            DateCreated = new DateTime(2023, 7, 15, 23, 20, 44, 273, DateTimeKind.Local).AddTicks(8595),
                            IsDeleted = false,
                            ServiceConfigName = "Number of comic chapters for free",
                            StringValue = "3",
                            Value = 3
                        },
                        new
                        {
                            ServiceConfigId = 2,
                            CreatedBy = new Guid("0b64f6f0-9f60-45c9-9e7b-f68ccc3fc57f"),
                            DateCreated = new DateTime(2023, 7, 15, 23, 20, 44, 273, DateTimeKind.Local).AddTicks(8598),
                            IsDeleted = false,
                            ServiceConfigName = "Conversion ratio COINS",
                            StringValue = "1000",
                            Value = 1000
                        },
                        new
                        {
                            ServiceConfigId = 3,
                            CreatedBy = new Guid("0b64f6f0-9f60-45c9-9e7b-f68ccc3fc57f"),
                            DateCreated = new DateTime(2023, 7, 15, 23, 20, 44, 273, DateTimeKind.Local).AddTicks(8600),
                            IsDeleted = false,
                            ServiceConfigName = "Default Currency",
                            StringValue = "VND",
                            Value = 0
                        });
                });

            modelBuilder.Entity("HikiComic.Data.Entities.ServicePrice", b =>
                {
                    b.Property<int>("ServicePriceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ServicePriceId"), 1L, 1);

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<string>("ServicePriceName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ServicePriceId");

                    b.ToTable("ServicePrices", (string)null);

                    b.HasData(
                        new
                        {
                            ServicePriceId = 1,
                            CreatedBy = new Guid("0b64f6f0-9f60-45c9-9e7b-f68ccc3fc57f"),
                            DateCreated = new DateTime(2023, 7, 15, 23, 20, 44, 273, DateTimeKind.Local).AddTicks(8555),
                            IsDeleted = false,
                            Price = 2.0,
                            ServicePriceName = "Read Comics"
                        },
                        new
                        {
                            ServicePriceId = 2,
                            CreatedBy = new Guid("0b64f6f0-9f60-45c9-9e7b-f68ccc3fc57f"),
                            DateCreated = new DateTime(2023, 7, 15, 23, 20, 44, 273, DateTimeKind.Local).AddTicks(8559),
                            IsDeleted = false,
                            Price = 5.0,
                            ServicePriceName = "Change Nickname"
                        },
                        new
                        {
                            ServicePriceId = 3,
                            CreatedBy = new Guid("0b64f6f0-9f60-45c9-9e7b-f68ccc3fc57f"),
                            DateCreated = new DateTime(2023, 7, 15, 23, 20, 44, 273, DateTimeKind.Local).AddTicks(8561),
                            IsDeleted = false,
                            Price = 10.0,
                            ServicePriceName = "Change Avatar"
                        });
                });

            modelBuilder.Entity("HikiComic.Data.Entities.Status", b =>
                {
                    b.Property<int>("StatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StatusId"), 1L, 1);

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("StatusName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("StatusId");

                    b.ToTable("Statuses", (string)null);

                    b.HasData(
                        new
                        {
                            StatusId = 1,
                            CreatedBy = new Guid("0b64f6f0-9f60-45c9-9e7b-f68ccc3fc57f"),
                            DateCreated = new DateTime(2023, 7, 15, 23, 20, 44, 273, DateTimeKind.Local).AddTicks(8209),
                            IsDeleted = false,
                            StatusName = "New"
                        },
                        new
                        {
                            StatusId = 2,
                            CreatedBy = new Guid("0b64f6f0-9f60-45c9-9e7b-f68ccc3fc57f"),
                            DateCreated = new DateTime(2023, 7, 15, 23, 20, 44, 273, DateTimeKind.Local).AddTicks(8222),
                            IsDeleted = false,
                            StatusName = "Ongoing"
                        },
                        new
                        {
                            StatusId = 3,
                            CreatedBy = new Guid("0b64f6f0-9f60-45c9-9e7b-f68ccc3fc57f"),
                            DateCreated = new DateTime(2023, 7, 15, 23, 20, 44, 273, DateTimeKind.Local).AddTicks(8224),
                            IsDeleted = false,
                            StatusName = "Drop"
                        },
                        new
                        {
                            StatusId = 4,
                            CreatedBy = new Guid("0b64f6f0-9f60-45c9-9e7b-f68ccc3fc57f"),
                            DateCreated = new DateTime(2023, 7, 15, 23, 20, 44, 273, DateTimeKind.Local).AddTicks(8226),
                            IsDeleted = false,
                            StatusName = "Completed"
                        });
                });

            modelBuilder.Entity("HikiComic.Data.Entities.TempAppUser", b =>
                {
                    b.Property<int>("TempAppUserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TempAppUserId"), 1L, 1);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("OTP")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<DateTime?>("OTPExpires")
                        .HasColumnType("datetime2");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("TempAppUserId");

                    b.ToTable("TempAppUsers", (string)null);
                });

            modelBuilder.Entity("HikiComic.Data.Entities.UserCoinDepositHistory", b =>
                {
                    b.Property<int>("UserCoinDepositHistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserCoinDepositHistoryId"), 1L, 1);

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<string>("ConvertCurrency")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<double>("DepositAmount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValue(0.0);

                    b.Property<DateTime>("DepositCreateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("DepositMethodId")
                        .HasColumnType("int");

                    b.Property<int>("DepositStatusId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DepositUpdateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("ExchangeRate")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<double>("OriginalAmount")
                        .HasColumnType("float");

                    b.Property<string>("OriginalCurrency")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Remarks")
                        .HasMaxLength(1000)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("TransactionId")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("UserCoinDepositHistoryId");

                    b.HasIndex("AccountId");

                    b.ToTable("UserCoinDepositHistories", (string)null);
                });

            modelBuilder.Entity("HikiComic.Data.Entities.UserCoinUsageHistory", b =>
                {
                    b.Property<int>("UserCoinUsageHistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserCoinUsageHistoryId"), 1L, 1);

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<double>("UsageAmount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValue(0.0);

                    b.Property<int>("UsageMethodId")
                        .HasColumnType("int");

                    b.Property<int>("UsageStatusId")
                        .HasColumnType("int");

                    b.HasKey("UserCoinUsageHistoryId");

                    b.HasIndex("AccountId");

                    b.ToTable("UserCoinUsageHistories", (string)null);
                });

            modelBuilder.Entity("HikiComic.Data.Entities.UserComicFollowing", b =>
                {
                    b.Property<int>("UserComicFollowingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserComicFollowingId"), 1L, 1);

                    b.Property<Guid>("AppUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ComicId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateFollow")
                        .HasColumnType("datetime2");

                    b.HasKey("UserComicFollowingId");

                    b.HasIndex("AppUserId");

                    b.HasIndex("ComicId");

                    b.ToTable("UserComicFollowings", (string)null);
                });

            modelBuilder.Entity("HikiComic.Data.Entities.UserComicLike", b =>
                {
                    b.Property<int>("UserComicLikeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserComicLikeId"), 1L, 1);

                    b.Property<Guid>("AppUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ComicId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateLiked")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2023, 7, 15, 23, 20, 44, 270, DateTimeKind.Local).AddTicks(2085));

                    b.Property<bool>("Liked")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.HasKey("UserComicLikeId");

                    b.HasIndex("AppUserId");

                    b.HasIndex("ComicId");

                    b.ToTable("UserComicLikes", (string)null);
                });

            modelBuilder.Entity("HikiComic.Data.Entities.UserComicPurchase", b =>
                {
                    b.Property<int>("UserComicPurchaseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserComicPurchaseId"), 1L, 1);

                    b.Property<int>("ChapterId")
                        .HasColumnType("int");

                    b.Property<int>("ComicId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("MoreInfo")
                        .HasMaxLength(1000)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("UserCoinUsageHistoryId")
                        .HasColumnType("int");

                    b.HasKey("UserComicPurchaseId");

                    b.HasIndex("ChapterId");

                    b.HasIndex("ComicId");

                    b.HasIndex("UserCoinUsageHistoryId")
                        .IsUnique();

                    b.ToTable("UserComicPurchases", (string)null);
                });

            modelBuilder.Entity("HikiComic.Data.Entities.UserComicRating", b =>
                {
                    b.Property<int>("UserComicRatingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserComicRatingId"), 1L, 1);

                    b.Property<Guid>("AppUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ComicId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateRating")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2023, 7, 15, 23, 20, 44, 270, DateTimeKind.Local).AddTicks(6996));

                    b.Property<double>("Rating")
                        .HasColumnType("float");

                    b.HasKey("UserComicRatingId");

                    b.HasIndex("AppUserId");

                    b.HasIndex("ComicId");

                    b.ToTable("UserComicRatings", (string)null);
                });

            modelBuilder.Entity("HikiComic.Data.Entities.UserComicReadingHistory", b =>
                {
                    b.Property<int>("UserComicReadingHistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserComicReadingHistoryId"), 1L, 1);

                    b.Property<Guid>("AppUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ChapterId")
                        .HasColumnType("int");

                    b.Property<int>("ComicId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateRead")
                        .HasColumnType("datetime2");

                    b.HasKey("UserComicReadingHistoryId");

                    b.HasIndex("AppUserId");

                    b.HasIndex("ChapterId");

                    b.HasIndex("ComicId");

                    b.ToTable("UserComicReadingHistories", (string)null);
                });

            modelBuilder.Entity("HikiComic.Data.Entities.UserRoleUpgradeExchange", b =>
                {
                    b.Property<int>("UserRoleUpgradeExchangeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserRoleUpgradeExchangeId"), 1L, 1);

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsReaded")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsReader")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(3000)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(3000)");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("UserRoleUpgradeRequestId")
                        .HasColumnType("int");

                    b.HasKey("UserRoleUpgradeExchangeId");

                    b.HasIndex("UserRoleUpgradeRequestId");

                    b.ToTable("UserRoleUpgradeExchanges", (string)null);
                });

            modelBuilder.Entity("HikiComic.Data.Entities.UserRoleUpgradeRequest", b =>
                {
                    b.Property<int>("UserRoleUpgradeRequestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserRoleUpgradeRequestId"), 1L, 1);

                    b.Property<Guid>("AppUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ApprovalStatus")
                        .HasColumnType("int");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CurrentRoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("DesiredRoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserRoleUpgradeRequestId");

                    b.HasIndex("AppUserId");

                    b.HasIndex("DesiredRoleId");

                    b.ToTable("UserRoleUpgradeRequests", (string)null);
                });

            modelBuilder.Entity("HikiComic.Data.Entities.Account", b =>
                {
                    b.HasOne("HikiComic.Data.Entities.AppUser", "AppUser")
                        .WithOne("Account")
                        .HasForeignKey("HikiComic.Data.Entities.Account", "AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("HikiComic.Data.Entities.AppRoleClaim", b =>
                {
                    b.HasOne("HikiComic.Data.Entities.AppRole", "AppRole")
                        .WithMany("AppRoleClaims")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppRole");
                });

            modelBuilder.Entity("HikiComic.Data.Entities.AppUser", b =>
                {
                    b.HasOne("HikiComic.Data.Entities.Gender", "Gender")
                        .WithMany("AppUsers")
                        .HasForeignKey("GenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Gender");
                });

            modelBuilder.Entity("HikiComic.Data.Entities.AppUserClaim", b =>
                {
                    b.HasOne("HikiComic.Data.Entities.AppUser", "AppUser")
                        .WithMany("AppUserClaims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("HikiComic.Data.Entities.AppUserDevice", b =>
                {
                    b.HasOne("HikiComic.Data.Entities.AppUser", "AppUser")
                        .WithMany("AppUserDevices")
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("HikiComic.Data.Entities.AppUserLogin", b =>
                {
                    b.HasOne("HikiComic.Data.Entities.AppUser", "AppUser")
                        .WithMany("AppUserLogins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("HikiComic.Data.Entities.AppUserOTP", b =>
                {
                    b.HasOne("HikiComic.Data.Entities.AppUser", "AppUser")
                        .WithMany("AppUserOTPs")
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("HikiComic.Data.Entities.AppUserRole", b =>
                {
                    b.HasOne("HikiComic.Data.Entities.AppRole", "AppRole")
                        .WithMany("AppUserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HikiComic.Data.Entities.AppUser", "AppUser")
                        .WithMany("AppUserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppRole");

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("HikiComic.Data.Entities.AppUserToken", b =>
                {
                    b.HasOne("HikiComic.Data.Entities.AppUser", "AppUser")
                        .WithMany("AppUserTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("HikiComic.Data.Entities.ArtistInComicDetail", b =>
                {
                    b.HasOne("HikiComic.Data.Entities.Artist", "Artist")
                        .WithMany("ArtistInComicDetails")
                        .HasForeignKey("ArtistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HikiComic.Data.Entities.ComicDetail", "ComicDetail")
                        .WithMany("ArtistInComicDetails")
                        .HasForeignKey("ComicDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Artist");

                    b.Navigation("ComicDetail");
                });

            modelBuilder.Entity("HikiComic.Data.Entities.AuthorInComicDetail", b =>
                {
                    b.HasOne("HikiComic.Data.Entities.Author", "Author")
                        .WithMany("AuthorInComicDetails")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HikiComic.Data.Entities.ComicDetail", "ComicDetail")
                        .WithMany("AuthorInComicDetails")
                        .HasForeignKey("ComicDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("ComicDetail");
                });

            modelBuilder.Entity("HikiComic.Data.Entities.Chapter", b =>
                {
                    b.HasOne("HikiComic.Data.Entities.ComicDetail", "ComicDetail")
                        .WithMany("Chapters")
                        .HasForeignKey("ComicDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ComicDetail");
                });

            modelBuilder.Entity("HikiComic.Data.Entities.ChapterImageURL", b =>
                {
                    b.HasOne("HikiComic.Data.Entities.Chapter", "Chapter")
                        .WithMany("ChapterImageURLs")
                        .HasForeignKey("ChapterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Chapter");
                });

            modelBuilder.Entity("HikiComic.Data.Entities.ComicDetail", b =>
                {
                    b.HasOne("HikiComic.Data.Entities.Comic", "Comic")
                        .WithOne("ComicDetail")
                        .HasForeignKey("HikiComic.Data.Entities.ComicDetail", "ComicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HikiComic.Data.Entities.Status", "Status")
                        .WithMany("ComicDetails")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Comic");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("HikiComic.Data.Entities.Comment", b =>
                {
                    b.HasOne("HikiComic.Data.Entities.AppUser", "AppUser")
                        .WithMany("Comments")
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HikiComic.Data.Entities.Comic", "Comic")
                        .WithMany("Comments")
                        .HasForeignKey("ComicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HikiComic.Data.Entities.Comment", "ParentComment")
                        .WithMany("ChildComments")
                        .HasForeignKey("ParentCommentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");

                    b.Navigation("Comic");

                    b.Navigation("ParentComment");
                });

            modelBuilder.Entity("HikiComic.Data.Entities.GenreDetail", b =>
                {
                    b.HasOne("HikiComic.Data.Entities.Genre", "Genre")
                        .WithOne("GenreDetail")
                        .HasForeignKey("HikiComic.Data.Entities.GenreDetail", "GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Genre");
                });

            modelBuilder.Entity("HikiComic.Data.Entities.GenreInComicDetail", b =>
                {
                    b.HasOne("HikiComic.Data.Entities.ComicDetail", "ComicDetail")
                        .WithMany("GenreInComicDetails")
                        .HasForeignKey("ComicDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HikiComic.Data.Entities.Genre", "Genre")
                        .WithMany("GenreInComicDetails")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ComicDetail");

                    b.Navigation("Genre");
                });

            modelBuilder.Entity("HikiComic.Data.Entities.Notification", b =>
                {
                    b.HasOne("HikiComic.Data.Entities.Chapter", "Chapter")
                        .WithMany("Notifications")
                        .HasForeignKey("ChapterId");

                    b.HasOne("HikiComic.Data.Entities.Comic", "Comic")
                        .WithMany("Notifications")
                        .HasForeignKey("ComicId");

                    b.HasOne("HikiComic.Data.Entities.AppUser", "AppUser")
                        .WithMany("Notifications")
                        .HasForeignKey("UpdatedBy");

                    b.Navigation("AppUser");

                    b.Navigation("Chapter");

                    b.Navigation("Comic");
                });

            modelBuilder.Entity("HikiComic.Data.Entities.UserCoinDepositHistory", b =>
                {
                    b.HasOne("HikiComic.Data.Entities.Account", "Account")
                        .WithMany("UserCoinDepositHistories")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("HikiComic.Data.Entities.UserCoinUsageHistory", b =>
                {
                    b.HasOne("HikiComic.Data.Entities.Account", "Account")
                        .WithMany("UserCoinUsageHistories")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("HikiComic.Data.Entities.UserComicFollowing", b =>
                {
                    b.HasOne("HikiComic.Data.Entities.AppUser", "AppUser")
                        .WithMany("UserComicFollowings")
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HikiComic.Data.Entities.Comic", "Comic")
                        .WithMany("UserComicFollowings")
                        .HasForeignKey("ComicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");

                    b.Navigation("Comic");
                });

            modelBuilder.Entity("HikiComic.Data.Entities.UserComicLike", b =>
                {
                    b.HasOne("HikiComic.Data.Entities.AppUser", "AppUser")
                        .WithMany("UserComicLikes")
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HikiComic.Data.Entities.Comic", "Comic")
                        .WithMany("UserComicLikes")
                        .HasForeignKey("ComicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");

                    b.Navigation("Comic");
                });

            modelBuilder.Entity("HikiComic.Data.Entities.UserComicPurchase", b =>
                {
                    b.HasOne("HikiComic.Data.Entities.Chapter", "Chapter")
                        .WithMany("UserComicPurchases")
                        .HasForeignKey("ChapterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HikiComic.Data.Entities.Comic", "Comic")
                        .WithMany("UserComicPurchases")
                        .HasForeignKey("ComicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HikiComic.Data.Entities.UserCoinUsageHistory", "UserCoinUsageHistory")
                        .WithOne("UserComicPurchase")
                        .HasForeignKey("HikiComic.Data.Entities.UserComicPurchase", "UserCoinUsageHistoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Chapter");

                    b.Navigation("Comic");

                    b.Navigation("UserCoinUsageHistory");
                });

            modelBuilder.Entity("HikiComic.Data.Entities.UserComicRating", b =>
                {
                    b.HasOne("HikiComic.Data.Entities.AppUser", "AppUser")
                        .WithMany("UserComicRatings")
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HikiComic.Data.Entities.Comic", "Comic")
                        .WithMany("UserComicRatings")
                        .HasForeignKey("ComicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");

                    b.Navigation("Comic");
                });

            modelBuilder.Entity("HikiComic.Data.Entities.UserComicReadingHistory", b =>
                {
                    b.HasOne("HikiComic.Data.Entities.AppUser", "AppUser")
                        .WithMany("UserComicReadingHistories")
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HikiComic.Data.Entities.Chapter", "Chapter")
                        .WithMany("UserComicReadingHistories")
                        .HasForeignKey("ChapterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HikiComic.Data.Entities.Comic", "Comic")
                        .WithMany("UserComicReadingHistories")
                        .HasForeignKey("ComicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");

                    b.Navigation("Chapter");

                    b.Navigation("Comic");
                });

            modelBuilder.Entity("HikiComic.Data.Entities.UserRoleUpgradeExchange", b =>
                {
                    b.HasOne("HikiComic.Data.Entities.UserRoleUpgradeRequest", "UserRoleUpgradeRequest")
                        .WithMany("UserRoleUpgradeExchanges")
                        .HasForeignKey("UserRoleUpgradeRequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserRoleUpgradeRequest");
                });

            modelBuilder.Entity("HikiComic.Data.Entities.UserRoleUpgradeRequest", b =>
                {
                    b.HasOne("HikiComic.Data.Entities.AppUser", "AppUser")
                        .WithMany("UserRoleUpgradeRequests")
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HikiComic.Data.Entities.AppRole", "AppRole")
                        .WithMany("UserRoleUpgradeRequests")
                        .HasForeignKey("DesiredRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppRole");

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("HikiComic.Data.Entities.Account", b =>
                {
                    b.Navigation("UserCoinDepositHistories");

                    b.Navigation("UserCoinUsageHistories");
                });

            modelBuilder.Entity("HikiComic.Data.Entities.AppRole", b =>
                {
                    b.Navigation("AppRoleClaims");

                    b.Navigation("AppUserRoles");

                    b.Navigation("UserRoleUpgradeRequests");
                });

            modelBuilder.Entity("HikiComic.Data.Entities.AppUser", b =>
                {
                    b.Navigation("Account")
                        .IsRequired();

                    b.Navigation("AppUserClaims");

                    b.Navigation("AppUserDevices");

                    b.Navigation("AppUserLogins");

                    b.Navigation("AppUserOTPs");

                    b.Navigation("AppUserRoles");

                    b.Navigation("AppUserTokens");

                    b.Navigation("Comments");

                    b.Navigation("Notifications");

                    b.Navigation("UserComicFollowings");

                    b.Navigation("UserComicLikes");

                    b.Navigation("UserComicRatings");

                    b.Navigation("UserComicReadingHistories");

                    b.Navigation("UserRoleUpgradeRequests");
                });

            modelBuilder.Entity("HikiComic.Data.Entities.Artist", b =>
                {
                    b.Navigation("ArtistInComicDetails");
                });

            modelBuilder.Entity("HikiComic.Data.Entities.Author", b =>
                {
                    b.Navigation("AuthorInComicDetails");
                });

            modelBuilder.Entity("HikiComic.Data.Entities.Chapter", b =>
                {
                    b.Navigation("ChapterImageURLs");

                    b.Navigation("Notifications");

                    b.Navigation("UserComicPurchases");

                    b.Navigation("UserComicReadingHistories");
                });

            modelBuilder.Entity("HikiComic.Data.Entities.Comic", b =>
                {
                    b.Navigation("ComicDetail")
                        .IsRequired();

                    b.Navigation("Comments");

                    b.Navigation("Notifications");

                    b.Navigation("UserComicFollowings");

                    b.Navigation("UserComicLikes");

                    b.Navigation("UserComicPurchases");

                    b.Navigation("UserComicRatings");

                    b.Navigation("UserComicReadingHistories");
                });

            modelBuilder.Entity("HikiComic.Data.Entities.ComicDetail", b =>
                {
                    b.Navigation("ArtistInComicDetails");

                    b.Navigation("AuthorInComicDetails");

                    b.Navigation("Chapters");

                    b.Navigation("GenreInComicDetails");
                });

            modelBuilder.Entity("HikiComic.Data.Entities.Comment", b =>
                {
                    b.Navigation("ChildComments");
                });

            modelBuilder.Entity("HikiComic.Data.Entities.Gender", b =>
                {
                    b.Navigation("AppUsers");
                });

            modelBuilder.Entity("HikiComic.Data.Entities.Genre", b =>
                {
                    b.Navigation("GenreDetail")
                        .IsRequired();

                    b.Navigation("GenreInComicDetails");
                });

            modelBuilder.Entity("HikiComic.Data.Entities.Status", b =>
                {
                    b.Navigation("ComicDetails");
                });

            modelBuilder.Entity("HikiComic.Data.Entities.UserCoinUsageHistory", b =>
                {
                    b.Navigation("UserComicPurchase")
                        .IsRequired();
                });

            modelBuilder.Entity("HikiComic.Data.Entities.UserRoleUpgradeRequest", b =>
                {
                    b.Navigation("UserRoleUpgradeExchanges");
                });
#pragma warning restore 612, 618
        }
    }
}
